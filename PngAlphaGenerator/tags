!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Assert	zlib/zutil.h	263;"	d
Assert	zlib/zutil.h	270;"	d
BAD	zlib/inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon3
BASE	zlib/adler32.c	14;"	d	file:
BITS	zlib/infback.c	181;"	d	file:
BITS	zlib/inflate.c	485;"	d	file:
BL_CODES	zlib/deflate.h	42;"	d
BUILDFIXED	zlib/inflate.c	90;"	d	file:
BUSY_STATE	zlib/deflate.h	56;"	d
BYFOUR	zlib/crc32.c	37;"	d	file:
BYFOUR	zlib/crc32.c	47;"	d	file:
BYTEBITS	zlib/infback.c	192;"	d	file:
BYTEBITS	zlib/inflate.c	496;"	d	file:
Buf_size	zlib/trees.c	77;"	d	file:
Byte	zlib/zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Byte	zlib/zconf.h	109;"	d
Bytef	zlib/zconf.h	/^   typedef Byte  FAR Bytef;$/;"	t
Bytef	zlib/zconf.h	110;"	d
Bytef	zlib/zconf.h	344;"	d
CHECK	libpng/pngconf.h	1625;"	d
CHECK	zlib/inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon3
CLEAR_HASH	zlib/deflate.c	193;"	d	file:
CODELENS	zlib/inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon3
CODES	zlib/inftrees.h	/^    CODES,$/;"	e	enum:__anon2
COMMENT	zlib/inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon3
COMMENT_STATE	zlib/deflate.h	54;"	d
COPY	zlib/gzguts.h	82;"	d
COPY	zlib/inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon3
COPY_	zlib/inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon3
CRC2	zlib/inflate.c	420;"	d	file:
CRC4	zlib/inflate.c	427;"	d	file:
CVT_PTR	libpng/pngconf.h	1627;"	d
CVT_PTR	libpng/pngconf.h	1635;"	d
CVT_PTR_NOCHECK	libpng/pngconf.h	1628;"	d
CVT_PTR_NOCHECK	libpng/pngconf.h	1636;"	d
Code	zlib/deflate.h	74;"	d
DEFLATE_H	zlib/deflate.h	14;"	d
DEF_MEM_LEVEL	zlib/zutil.h	68;"	d
DEF_MEM_LEVEL	zlib/zutil.h	70;"	d
DEF_WBITS	zlib/zutil.h	63;"	d
DICT	zlib/inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon3
DICTID	zlib/inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon3
DIST	zlib/inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon3
DISTEXT	zlib/inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon3
DISTS	zlib/inftrees.h	/^    DISTS$/;"	e	enum:__anon2
DIST_CODE_LEN	zlib/trees.c	86;"	d	file:
DO1	zlib/adler32.c	18;"	d	file:
DO1	zlib/crc32.c	217;"	d	file:
DO16	zlib/adler32.c	22;"	d	file:
DO2	zlib/adler32.c	19;"	d	file:
DO4	zlib/adler32.c	20;"	d	file:
DO8	zlib/adler32.c	21;"	d	file:
DO8	zlib/crc32.c	218;"	d	file:
DOBIG32	zlib/crc32.c	301;"	d	file:
DOBIG4	zlib/crc32.c	298;"	d	file:
DOLIT32	zlib/crc32.c	261;"	d	file:
DOLIT4	zlib/crc32.c	258;"	d	file:
DONE	zlib/inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon3
DROPBITS	zlib/infback.c	185;"	d	file:
DROPBITS	zlib/inflate.c	489;"	d	file:
DYNAMIC_CRC_TABLE	zlib/crc32.c	25;"	d	file:
DYN_TREES	zlib/zutil.h	76;"	d
D_CODES	zlib/deflate.h	39;"	d
Dad	zlib/deflate.h	75;"	d
END_BLOCK	zlib/trees.c	50;"	d	file:
ENOUGH	zlib/inftrees.h	51;"	d
ENOUGH_DISTS	zlib/inftrees.h	50;"	d
ENOUGH_LENS	zlib/inftrees.h	49;"	d
EQUAL	zlib/deflate.c	151;"	d	file:
ERR_MSG	zlib/zutil.h	54;"	d
ERR_RETURN	zlib/zutil.h	56;"	d
EXLEN	zlib/inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon3
EXTRA	zlib/inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon3
EXTRA_STATE	zlib/deflate.h	52;"	d
FAR	libpng/pngconf.h	1285;"	d
FAR	libpng/pngconf.h	1314;"	d
FAR	zlib/zconf.h	257;"	d
FAR	zlib/zconf.h	259;"	d
FAR	zlib/zconf.h	266;"	d
FAR	zlib/zconf.h	268;"	d
FAR	zlib/zconf.h	292;"	d
FAR	zlib/zconf.h	333;"	d
FARDATA	libpng/pngconf.h	1307;"	d
FARDATA	libpng/pngconf.h	1319;"	d
FINISH_STATE	zlib/deflate.h	57;"	d
FLAGS	zlib/inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon3
FLUSH_BLOCK	zlib/deflate.c	1448;"	d	file:
FLUSH_BLOCK_ONLY	zlib/deflate.c	1436;"	d	file:
F_OPEN	zlib/zutil.h	108;"	d
F_OPEN	zlib/zutil.h	183;"	d
F_OPEN64	zlib/zutil.h	187;"	d
F_OPEN64	zlib/zutil.h	189;"	d
Freq	zlib/deflate.h	73;"	d
GF2_DIM	zlib/crc32.c	341;"	d	file:
GT_OFF	zlib/gzguts.h	128;"	d
GT_OFF	zlib/gzguts.h	131;"	d
GUNZIP	zlib/inflate.h	16;"	d
GZBUFSIZE	zlib/gzguts.h	72;"	d
GZIP	zlib/deflate.h	23;"	d
GZIP	zlib/gzguts.h	83;"	d
GZ_APPEND	zlib/gzguts.h	78;"	d
GZ_NONE	zlib/gzguts.h	75;"	d
GZ_READ	zlib/gzguts.h	76;"	d
GZ_WRITE	zlib/gzguts.h	77;"	d
HAVE_MEMCPY	zlib/zutil.h	240;"	d
HAVE_VSNPRINTF	zlib/zutil.h	196;"	d
HAVE_VSNPRINTF	zlib/zutil.h	201;"	d
HCRC	zlib/inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon3
HCRC_STATE	zlib/deflate.h	55;"	d
HEAD	zlib/inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon3
HEAP_SIZE	zlib/deflate.h	45;"	d
HSVtoRGB	pngwriter.cpp	/^void pngwriter::HSVtoRGB( double *r, double *g, double *b, double h, double s, double v )$/;"	f	class:pngwriter
INITBITS	zlib/infback.c	141;"	d	file:
INITBITS	zlib/inflate.c	460;"	d	file:
INIT_STATE	zlib/deflate.h	51;"	d
INSERT_STRING	zlib/deflate.c	178;"	d	file:
INSERT_STRING	zlib/deflate.c	183;"	d	file:
IPos	zlib/deflate.h	/^typedef unsigned IPos;$/;"	t
LDATA	libpng/pngconf.h	1276;"	d
LDATA	libpng/pngconf.h	1278;"	d
LEN	zlib/inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon3
LENEXT	zlib/inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon3
LENGTH	zlib/inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon3
LENGTH_CODES	zlib/deflate.h	30;"	d
LENLENS	zlib/inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon3
LENS	zlib/inftrees.h	/^    LENS,$/;"	e	enum:__anon2
LEN_	zlib/inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon3
LIT	zlib/inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon3
LITERALS	zlib/deflate.h	33;"	d
LOAD	zlib/infback.c	119;"	d	file:
LOAD	zlib/inflate.c	438;"	d	file:
LOOK	zlib/gzguts.h	81;"	d
LSEEK	zlib/gzlib.c	11;"	d	file:
LSEEK	zlib/gzlib.c	9;"	d	file:
L_CODES	zlib/deflate.h	36;"	d
Len	zlib/deflate.h	76;"	d
MACOS	libpng/pngconf.h	349;"	d
MATCH	zlib/inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon3
MAXBITS	zlib/inftrees.c	9;"	d	file:
MAXSEG_64K	zlib/zconf.h	161;"	d
MAX_BITS	zlib/deflate.h	48;"	d
MAX_BL_BITS	zlib/trees.c	47;"	d	file:
MAX_DIST	zlib/deflate.h	283;"	d
MAX_MATCH	zlib/zutil.h	80;"	d
MAX_MEM_LEVEL	zlib/zconf.h	208;"	d
MAX_MEM_LEVEL	zlib/zconf.h	210;"	d
MAX_PTR	zlib/zutil.c	198;"	d	file:
MAX_WBITS	zlib/zconf.h	220;"	d
MEM	zlib/inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon3
MIN	libpng/pngrio.c	78;"	d	file:
MIN	libpng/pngwio.c	72;"	d	file:
MIN_LOOKAHEAD	zlib/deflate.h	278;"	d
MIN_MATCH	zlib/zutil.h	79;"	d
MOD	zlib/adler32.c	26;"	d	file:
MOD	zlib/adler32.c	55;"	d	file:
MOD4	zlib/adler32.c	46;"	d	file:
MOD4	zlib/adler32.c	56;"	d	file:
MSDOS	zlib/zconf.h	135;"	d
MY_ZCALLOC	zlib/zutil.c	190;"	d	file:
MY_ZCALLOC	zlib/zutil.c	268;"	d	file:
NAME	zlib/inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon3
NAME_STATE	zlib/deflate.h	53;"	d
NEAR_BUF_SIZE	libpng/pngrio.c	77;"	d	file:
NEAR_BUF_SIZE	libpng/pngwio.c	71;"	d	file:
NEEDBITS	zlib/infback.c	174;"	d	file:
NEEDBITS	zlib/inflate.c	478;"	d	file:
NEXT	zlib/gzread.c	66;"	d	file:
NIL	zlib/deflate.c	104;"	d	file:
NMAX	zlib/adler32.c	15;"	d	file:
NOCHECK	libpng/pngconf.h	1626;"	d
NO_DUMMY_DECL	zlib/zconf.h	202;"	d
NO_FREETYPE	pngwriter.cpp	44;"	d	file:
NO_GZCOMPRESS	zlib/gzguts.h	27;"	d
NO_MEMCPY	zlib/zutil.h	230;"	d
NO_MEMCPY	zlib/zutil.h	237;"	d
NO_vsnprintf	zlib/zconf.h	392;"	d
NO_vsnprintf	zlib/zconf.h	396;"	d
NO_vsnprintf	zlib/zutil.h	208;"	d
NO_vsnprintf	zlib/zutil.h	211;"	d
NO_vsnprintf	zlib/zutil.h	222;"	d
NO_vsnprintf	zlib/zutil.h	226;"	d
OF	zlib/zconf.h	240;"	d
OF	zlib/zconf.h	242;"	d
OFF	zlib/inffast.c	25;"	d	file:
OFF	zlib/inffast.c	28;"	d	file:
OS	zlib/inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon3
OS2	zlib/zconf.h	138;"	d
OS_CODE	zlib/zutil.h	103;"	d
OS_CODE	zlib/zutil.h	107;"	d
OS_CODE	zlib/zutil.h	113;"	d
OS_CODE	zlib/zutil.h	117;"	d
OS_CODE	zlib/zutil.h	124;"	d
OS_CODE	zlib/zutil.h	135;"	d
OS_CODE	zlib/zutil.h	140;"	d
OS_CODE	zlib/zutil.h	145;"	d
OS_CODE	zlib/zutil.h	179;"	d
OS_CODE	zlib/zutil.h	88;"	d
PNGAPI	libpng/pngconf.h	1436;"	d
PNGAPI	libpng/pngconf.h	1437;"	d
PNGAPI	libpng/pngconf.h	1465;"	d
PNGAPI	libpng/pngconf.h	1467;"	d
PNGAPI	libpng/pngconf.h	1508;"	d
PNGAPI	libpng/pngconf.h	1517;"	d
PNGARG	libpng/pngconf.h	325;"	d
PNGARG	libpng/pngconf.h	329;"	d
PNGARG	libpng/pngconf.h	334;"	d
PNGCONF_H	libpng/pngconf.h	21;"	d
PNGWRITER_DEFAULT_COMPRESSION	pngwriter.h	84;"	d
PNGWRITER_H	pngwriter.h	45;"	d
PNGWRITER_VERSION	pngwriter.h	47;"	d
PNG_16_TO_8	libpng/png.h	2967;"	d
PNG_1_2_X	libpng/pngconf.h	23;"	d
PNG_ABORT	libpng/pngconf.h	1613;"	d
PNG_ABORT	libpng/pngconf.h	281;"	d
PNG_ADD_ALPHA	libpng/png.h	2982;"	d
PNG_AFTER_IDAT	libpng/png.h	2938;"	d
PNG_ALLOCATED	libpng/pngconf.h	1564;"	d
PNG_ALLOCATED	libpng/pngconf.h	1599;"	d
PNG_ALL_FILTERS	libpng/png.h	1972;"	d
PNG_ALL_MNG_FEATURES	libpng/png.h	1258;"	d
PNG_ALWAYS_EXTERN	libpng/pngconf.h	448;"	d
PNG_ASM_FLAGS_INITIALIZED	libpng/png.h	2768;"	d
PNG_ASM_FLAG_MMX_READ_COMBINE_ROW	libpng/png.h	2762;"	d
PNG_ASM_FLAG_MMX_READ_FILTER_AVG	libpng/png.h	2766;"	d
PNG_ASM_FLAG_MMX_READ_FILTER_PAETH	libpng/png.h	2767;"	d
PNG_ASM_FLAG_MMX_READ_FILTER_SUB	libpng/png.h	2764;"	d
PNG_ASM_FLAG_MMX_READ_FILTER_UP	libpng/png.h	2765;"	d
PNG_ASM_FLAG_MMX_READ_INTERLACE	libpng/png.h	2763;"	d
PNG_ASM_FLAG_MMX_SUPPORT_COMPILED	libpng/png.h	2760;"	d
PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU	libpng/png.h	2761;"	d
PNG_ASSEMBLER_CODE_SUPPORTED	libpng/pngconf.h	817;"	d
PNG_BACKGROUND	libpng/png.h	2964;"	d
PNG_BACKGROUND_EXPAND	libpng/png.h	2965;"	d
PNG_BACKGROUND_GAMMA_FILE	libpng/png.h	1819;"	d
PNG_BACKGROUND_GAMMA_SCREEN	libpng/png.h	1818;"	d
PNG_BACKGROUND_GAMMA_UNIQUE	libpng/png.h	1820;"	d
PNG_BACKGROUND_GAMMA_UNKNOWN	libpng/png.h	1817;"	d
PNG_BACKGROUND_IS_GRAY	libpng/png.h	2952;"	d
PNG_BGR	libpng/png.h	2957;"	d
PNG_BUILD_DLL	libpng/pngconf.h	217;"	d
PNG_BYTES_TO_CHECK	pngwriter.h	83;"	d
PNG_CHECK_cHRM_SUPPORTED	libpng/pngconf.h	151;"	d
PNG_CHUNK_NAME_LENGTH	libpng/png.h	787;"	d
PNG_COLOR_DIST	libpng/png.h	3045;"	d
PNG_COLOR_MASK_ALPHA	libpng/png.h	1096;"	d
PNG_COLOR_MASK_COLOR	libpng/png.h	1095;"	d
PNG_COLOR_MASK_PALETTE	libpng/png.h	1094;"	d
PNG_COLOR_TYPE_GA	libpng/png.h	1106;"	d
PNG_COLOR_TYPE_GRAY	libpng/png.h	1099;"	d
PNG_COLOR_TYPE_GRAY_ALPHA	libpng/png.h	1103;"	d
PNG_COLOR_TYPE_PALETTE	libpng/png.h	1100;"	d
PNG_COLOR_TYPE_RGB	libpng/png.h	1101;"	d
PNG_COLOR_TYPE_RGBA	libpng/png.h	1105;"	d
PNG_COLOR_TYPE_RGB_ALPHA	libpng/png.h	1102;"	d
PNG_COMPRESSION_TYPE_BASE	libpng/png.h	1109;"	d
PNG_COMPRESSION_TYPE_DEFAULT	libpng/png.h	1110;"	d
PNG_CONSOLE_IO_SUPPORTED	libpng/pngconf.h	312;"	d
PNG_CONST	libpng/pngconf.h	503;"	d
PNG_CONST	libpng/pngconf.h	505;"	d
PNG_CONVERT_tIME_SUPPORTED	libpng/pngconf.h	1198;"	d
PNG_COST_FACTOR	libpng/png.h	2999;"	d
PNG_COST_SHIFT	libpng/png.h	2998;"	d
PNG_CRC_DEFAULT	libpng/png.h	1940;"	d
PNG_CRC_ERROR_QUIT	libpng/png.h	1941;"	d
PNG_CRC_NO_CHANGE	libpng/png.h	1945;"	d
PNG_CRC_QUIET_USE	libpng/png.h	1944;"	d
PNG_CRC_WARN_DISCARD	libpng/png.h	1942;"	d
PNG_CRC_WARN_USE	libpng/png.h	1943;"	d
PNG_DEBUG	libpng/pngconf.h	283;"	d
PNG_DEBUG_FILE	libpng/png.h	2659;"	d
PNG_DEPRECATED	libpng/pngconf.h	1572;"	d
PNG_DEPRECATED	libpng/pngconf.h	1590;"	d
PNG_DEPSTRUCT	libpng/png.h	/^     png_charp current_text PNG_DEPSTRUCT;         \/* current text chunk buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^     png_charp current_text_ptr PNG_DEPSTRUCT;     \/* current location in current_text *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^     png_size_t current_text_left PNG_DEPSTRUCT;   \/* how much text left to read in input *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^     png_size_t current_text_size PNG_DEPSTRUCT;   \/* current size of text input data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   double scal_pixel_height PNG_DEPSTRUCT;   \/* height of one pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   double scal_pixel_width PNG_DEPSTRUCT;    \/* width of one pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float background_gamma PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   float gamma PNG_DEPSTRUCT;          \/* file gamma value *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   float gamma PNG_DEPSTRUCT; \/* gamma value of image, if (valid & PNG_INFO_gAMA) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float screen_gamma PNG_DEPSTRUCT;   \/* screen gamma value (display_exponent) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   float x_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float x_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float x_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float x_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float y_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float y_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float y_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   float y_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   int cur_palette PNG_DEPSTRUCT;                  \/* current push library palette index *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int gamma_shift PNG_DEPSTRUCT;      \/* number of "insignificant" bits 16-bit gamma *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int max_text PNG_DEPSTRUCT; \/* current size of text array *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   int num_chunk_list PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int num_text PNG_DEPSTRUCT; \/* number of comments read\/to write *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   int process_mode PNG_DEPSTRUCT;                 \/* what push library is currently doing *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int zlib_level PNG_DEPSTRUCT;            \/* holds zlib compression level *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int zlib_mem_level PNG_DEPSTRUCT;        \/* holds zlib compression memory level *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int zlib_method PNG_DEPSTRUCT;           \/* holds zlib compression method *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int zlib_strategy PNG_DEPSTRUCT;         \/* holds zlib compression strategy *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   int zlib_window_bits PNG_DEPSTRUCT;      \/* holds zlib compression window bits *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte     mmx_bitdepth_threshold PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte background_gamma_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte bit_depth PNG_DEPSTRUCT;        \/* bit depth of file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte bit_depth PNG_DEPSTRUCT;      \/* 1, 2, 4, 8, or 16 bits\/channel (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte channels PNG_DEPSTRUCT;         \/* number of channels in file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte channels PNG_DEPSTRUCT;       \/* number of data channels per pixel (1, 2, 3, 4) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte chunk_name[5] PNG_DEPSTRUCT;    \/* null-terminated name of current chunk *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte color_type PNG_DEPSTRUCT;       \/* color type of file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte color_type PNG_DEPSTRUCT;     \/* see PNG_COLOR_TYPE_ below (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte compression PNG_DEPSTRUCT;      \/* file compression type (always 0) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte compression_type PNG_DEPSTRUCT; \/* must be PNG_COMPRESSION_TYPE_BASE (IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte compression_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte do_filter PNG_DEPSTRUCT;        \/* row filter flags (see PNG_FILTER_ below ) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte filler PNG_DEPSTRUCT;           \/* filler byte for pixel expansion *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte filter PNG_DEPSTRUCT;           \/* file filter type (always 0) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte filter_type PNG_DEPSTRUCT;    \/* must be PNG_FILTER_TYPE_BASE (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte filter_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte heuristic_method PNG_DEPSTRUCT;        \/* heuristic for row filter selection *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte iccp_compression PNG_DEPSTRUCT; \/* Always zero *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte interlace_type PNG_DEPSTRUCT; \/* One of PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte interlaced PNG_DEPSTRUCT;       \/* PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte mng_features_permitted PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte num_prev_filters PNG_DEPSTRUCT;        \/* number of weights for previous rows *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte offset_unit_type PNG_DEPSTRUCT; \/* offset units type *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte pass PNG_DEPSTRUCT;             \/* current interlace pass (0 - 6) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte pcal_nparams PNG_DEPSTRUCT;   \/* number of parameters given in pcal_params *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte pcal_type PNG_DEPSTRUCT;      \/* equation type (see PNG_EQUATION_ below) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte phys_unit_type PNG_DEPSTRUCT; \/* resolution type (see PNG_RESOLUTION_ below) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte pixel_depth PNG_DEPSTRUCT;      \/* number of bits per pixel *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte pixel_depth PNG_DEPSTRUCT;    \/* number of bits per pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte rgb_to_gray_status PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte scal_unit PNG_DEPSTRUCT;         \/* unit of physical scale *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte sig_bytes PNG_DEPSTRUCT;        \/* magic bytes read\/written from start of file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte signature[8] PNG_DEPSTRUCT;   \/* magic bytes read by libpng from start of file *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte spare_byte PNG_DEPSTRUCT;     \/* to align the data, and for future use *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte srgb_intent PNG_DEPSTRUCT; \/* sRGB rendering intent [0, 1, 2, or 3] *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte user_transform_channels PNG_DEPSTRUCT; \/* channels in user transformed pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte user_transform_depth PNG_DEPSTRUCT;    \/* bit depth of user transformed pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte usr_bit_depth PNG_DEPSTRUCT;    \/* bit depth of users row *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_byte usr_channels PNG_DEPSTRUCT;     \/* channels at start of write *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep avg_row PNG_DEPSTRUCT;         \/* buffer to save "avg" row when filtering *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep big_row_buf PNG_DEPSTRUCT;        \/* buffer to save current (unfiltered) row *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep chunk_list PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep current_buffer PNG_DEPSTRUCT;         \/* buffer for recently used data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep current_buffer_ptr PNG_DEPSTRUCT;     \/* current location in current_buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep dither_index PNG_DEPSTRUCT;           \/* index translation for palette files *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep dither_sort PNG_DEPSTRUCT;        \/* working sort array *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep gamma_from_1 PNG_DEPSTRUCT;    \/* converts from 1.0 to screen *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep gamma_table PNG_DEPSTRUCT;     \/* gamma table for 8-bit depth files *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep gamma_to_1 PNG_DEPSTRUCT;      \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep index_to_palette PNG_DEPSTRUCT;   \/* where the original index currently is *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep offset_table PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep paeth_row PNG_DEPSTRUCT;       \/* buffer to save "Paeth" row when filtering *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep palette_lookup PNG_DEPSTRUCT;         \/* lookup table for dithering *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep palette_to_index PNG_DEPSTRUCT;   \/* which original index points to this *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep prev_filters PNG_DEPSTRUCT;           \/* filter type(s) of previous row(s) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep prev_row PNG_DEPSTRUCT;        \/* buffer to save previous (unfiltered) row *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep row_buf PNG_DEPSTRUCT;         \/* buffer to save current (unfiltered) row *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep save_buffer PNG_DEPSTRUCT;            \/* buffer for previously read data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep save_buffer_ptr PNG_DEPSTRUCT;        \/* current location in save_buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep sub_row PNG_DEPSTRUCT;         \/* buffer to save "sub" row when filtering *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep trans PNG_DEPSTRUCT;           \/* transparency values for paletted files *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep trans PNG_DEPSTRUCT; \/* transparent values for paletted image *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep up_row PNG_DEPSTRUCT;          \/* buffer to save "up" row when filtering *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytep zbuf PNG_DEPSTRUCT;            \/* buffer for zlib *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytepp offset_table_ptr PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_bytepp row_pointers PNG_DEPSTRUCT;        \/* the image bits *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp iccp_name PNG_DEPSTRUCT;     \/* profile name *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp iccp_profile PNG_DEPSTRUCT;  \/* International Color Consortium profile data *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp pcal_purpose PNG_DEPSTRUCT;  \/* pCAL chunk description string *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp pcal_units PNG_DEPSTRUCT;    \/* Latin-1 string giving physical units *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp scal_s_height PNG_DEPSTRUCT;    \/* string containing width *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp scal_s_width PNG_DEPSTRUCT;     \/* string containing height *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_charp time_buffer PNG_DEPSTRUCT;            \/* String to hold RFC 1123 time text *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_charpp pcal_params PNG_DEPSTRUCT;  \/* ASCII strings containing parameter values *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_16 background PNG_DEPSTRUCT;   \/* background color in screen gamma space *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_16 background PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_16 background_1 PNG_DEPSTRUCT; \/* background normalized to gamma 1.0 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_16 trans_values PNG_DEPSTRUCT; \/* transparency values for non-paletted files *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_16 trans_values PNG_DEPSTRUCT; \/* transparent color for non-palette image *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_8 shift PNG_DEPSTRUCT;         \/* shift for significant bit tranformation *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_8 sig_bit PNG_DEPSTRUCT;       \/* significant bits in each available channel *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_color_8 sig_bit PNG_DEPSTRUCT; \/* significant bits in color channels *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_colorp palette PNG_DEPSTRUCT;        \/* palette from the input file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_colorp palette PNG_DEPSTRUCT;      \/* array of color values (valid & PNG_INFO_PLTE) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_error_ptr error_fn PNG_DEPSTRUCT;    \/* function for printing errors and aborting *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_error_ptr warning_fn PNG_DEPSTRUCT;  \/* function for printing warnings *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_gamma PNG_DEPSTRUCT; \/* gamma of image, if (valid & PNG_INFO_gAMA) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_gamma PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_x_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_x_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_x_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_x_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_y_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_y_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_y_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_fixed_point int_y_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_flush_ptr output_flush_fn PNG_DEPSTRUCT; \/* Function for flushing output *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_free_ptr free_fn PNG_DEPSTRUCT;         \/* function for freeing memory *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_int_32 pcal_X0 PNG_DEPSTRUCT;      \/* minimum value *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_int_32 pcal_X1 PNG_DEPSTRUCT;      \/* maximum value *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_int_32 x_offset PNG_DEPSTRUCT; \/* x offset on page *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_int_32 y_offset PNG_DEPSTRUCT; \/* y offset on page *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_malloc_ptr malloc_fn PNG_DEPSTRUCT;     \/* function for allocating memory *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_progressive_end_ptr end_fn PNG_DEPSTRUCT;   \/* called after image is complete *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_progressive_info_ptr info_fn PNG_DEPSTRUCT; \/* called after header data fully read *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_progressive_row_ptr row_fn PNG_DEPSTRUCT;   \/* called after each prog. row is decoded *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_read_status_ptr read_row_fn PNG_DEPSTRUCT;   \/* called after each row is decoded *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_row_info row_info PNG_DEPSTRUCT;     \/* used for transformation routines *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_rw_ptr read_data_fn PNG_DEPSTRUCT;   \/* function for reading input data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_rw_ptr write_data_fn PNG_DEPSTRUCT;  \/* function for writing output data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_sPLT_tp splt_palettes PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t buffer_size PNG_DEPSTRUCT;           \/* total amount of available input data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t current_buffer_size PNG_DEPSTRUCT;   \/* amount of data now in current_buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t save_buffer_max PNG_DEPSTRUCT;       \/* total size of save_buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t save_buffer_size PNG_DEPSTRUCT;      \/* amount of data now in save_buffer *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t unknown_chunks_num PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_size_t zbuf_size PNG_DEPSTRUCT;      \/* size of zbuf *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_textp text PNG_DEPSTRUCT; \/* array of comments read\/to write *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_time mod_time PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 filler PNG_DEPSTRUCT;           \/* filler bytes for pixel expansion *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 num_palette PNG_DEPSTRUCT;   \/* number of color entries in palette *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 num_palette PNG_DEPSTRUCT; \/* number of color entries in "palette" (PLTE) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 num_trans PNG_DEPSTRUCT;     \/* number of transparency values *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 num_trans PNG_DEPSTRUCT;   \/* number of transparent palette color (tRNS) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 offset_table_count PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 offset_table_count_free PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 offset_table_number PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 rgb_to_gray_blue_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 rgb_to_gray_green_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16 rgb_to_gray_red_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p filter_costs PNG_DEPSTRUCT;        \/* relative filter calculation cost *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p filter_weights PNG_DEPSTRUCT;      \/* weight(s) for previous line(s) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p hist PNG_DEPSTRUCT;                \/* histogram *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p hist PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p inv_filter_costs PNG_DEPSTRUCT;    \/* 1\/relative filter calculation cost *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16p inv_filter_weights PNG_DEPSTRUCT;  \/* 1\/weight(s) for previous line(s) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16pp gamma_16_from_1 PNG_DEPSTRUCT; \/* converts from 1.0 to screen *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16pp gamma_16_table PNG_DEPSTRUCT; \/* gamma table for 16-bit depth files *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_16pp gamma_16_to_1 PNG_DEPSTRUCT; \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32  asm_flags PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32  mmx_rowbytes_threshold PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 crc PNG_DEPSTRUCT;           \/* current chunk CRC value *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 flags PNG_DEPSTRUCT;         \/* flags indicating various things to libpng *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 flush_dist PNG_DEPSTRUCT;    \/* how many rows apart to flush, 0 - no flush *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 flush_rows PNG_DEPSTRUCT;    \/* number of rows written since last flush *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 free_me PNG_DEPSTRUCT;     \/* flags items libpng is responsible for freeing *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 free_me PNG_DEPSTRUCT;   \/* flags items libpng is responsible for freeing *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 height PNG_DEPSTRUCT;        \/* height of image in pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 height PNG_DEPSTRUCT;      \/* height of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 iccp_proflen PNG_DEPSTRUCT;  \/* ICC profile data length *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 idat_size PNG_DEPSTRUCT;     \/* current IDAT size for read *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 iwidth PNG_DEPSTRUCT;        \/* width of current interlaced row in pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 mng_features_permitted PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 mode PNG_DEPSTRUCT;          \/* tells us where we are in the PNG file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 num_rows PNG_DEPSTRUCT;      \/* number of rows in current pass *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 push_length PNG_DEPSTRUCT;          \/* size of current input chunk *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 row_buf_size PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 row_number PNG_DEPSTRUCT;    \/* current row in interlace pass *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 rowbytes PNG_DEPSTRUCT;      \/* size of row in bytes *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 rowbytes PNG_DEPSTRUCT;    \/* bytes needed to hold an untransformed row *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 skip_length PNG_DEPSTRUCT;          \/* bytes to skip in input data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 splt_palettes_num PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 transformations PNG_DEPSTRUCT; \/* which transformations to perform *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 user_chunk_cache_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 user_height_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 user_width_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 usr_width PNG_DEPSTRUCT;     \/* width of row at start of write *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 valid PNG_DEPSTRUCT;       \/* valid chunk data (see PNG_INFO_ below) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 width PNG_DEPSTRUCT;         \/* width of image in pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 width PNG_DEPSTRUCT;       \/* width of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 x_pixels_per_unit PNG_DEPSTRUCT; \/* horizontal pixel density *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_uint_32 y_pixels_per_unit PNG_DEPSTRUCT; \/* vertical pixel density *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_unknown_chunk unknown_chunk PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_unknown_chunkp unknown_chunks PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	libpng/png.h	/^   png_user_chunk_ptr read_user_chunk_fn PNG_DEPSTRUCT; \/* user read chunk handler *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_user_transform_ptr read_user_transform_fn PNG_DEPSTRUCT; \/* user read transform *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_user_transform_ptr write_user_transform_fn PNG_DEPSTRUCT; \/* user write transform *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_voidp error_ptr PNG_DEPSTRUCT;       \/* user supplied struct for error functions *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_voidp io_ptr PNG_DEPSTRUCT;          \/* ptr to application struct for I\/O functions *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_voidp mem_ptr PNG_DEPSTRUCT;            \/* user supplied struct for mem functions *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_voidp user_chunk_ptr PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_voidp user_transform_ptr PNG_DEPSTRUCT; \/* user supplied struct for user transform *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   png_write_status_ptr write_row_fn PNG_DEPSTRUCT; \/* called after each row is encoded *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^   z_stream zstream PNG_DEPSTRUCT;          \/* pointer to decompression structure (below) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^  png_charp chunkdata PNG_DEPSTRUCT;  \/* buffer for reading chunk data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^  png_uint_32 old_big_row_buf_size PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/png.h	/^  png_uint_32 old_prev_row_size PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	libpng/pngconf.h	1575;"	d
PNG_DEPSTRUCT	libpng/pngconf.h	1602;"	d
PNG_DESTROY_WILL_FREE_DATA	libpng/png.h	2201;"	d
PNG_DITHER	libpng/png.h	2963;"	d
PNG_DITHER_BLUE_BITS	libpng/pngconf.h	474;"	d
PNG_DITHER_GREEN_BITS	libpng/pngconf.h	471;"	d
PNG_DITHER_RED_BITS	libpng/pngconf.h	468;"	d
PNG_DLL	libpng/pngconf.h	1396;"	d
PNG_DLL	libpng/pngconf.h	223;"	d
PNG_DLL	libpng/pngconf.h	237;"	d
PNG_DLL	libpng/pngconf.h	245;"	d
PNG_DLL	libpng/pngconf.h	252;"	d
PNG_EASY_ACCESS_SUPPORTED	libpng/pngconf.h	801;"	d
PNG_EQUATION_ARBITRARY	libpng/png.h	1130;"	d
PNG_EQUATION_BASE_E	libpng/png.h	1129;"	d
PNG_EQUATION_HYPERBOLIC	libpng/png.h	1131;"	d
PNG_EQUATION_LAST	libpng/png.h	1132;"	d
PNG_EQUATION_LINEAR	libpng/png.h	1128;"	d
PNG_ERROR_MODE	libpng/pngpread.c	28;"	d	file:
PNG_ERROR_NUMBERS_SUPPORTED	libpng/pngconf.h	769;"	d
PNG_ERROR_TEXT_SUPPORTED	libpng/pngconf.h	147;"	d
PNG_EXPAND	libpng/png.h	2969;"	d
PNG_EXPAND_tRNS	libpng/png.h	2983;"	d
PNG_EXPORT	libpng/pngconf.h	1484;"	d
PNG_EXPORT	libpng/pngconf.h	1486;"	d
PNG_EXPORT	libpng/pngconf.h	1525;"	d
PNG_EXPORT	libpng/pngconf.h	1535;"	d
PNG_EXPORT_TYPE1	libpng/pngconf.h	1478;"	d
PNG_EXPORT_TYPE2	libpng/pngconf.h	1479;"	d
PNG_EXPORT_VAR	libpng/pngconf.h	1529;"	d
PNG_EXPORT_VAR	libpng/pngconf.h	1540;"	d
PNG_EXTERN	libpng/pngconf.h	420;"	d
PNG_FILLER	libpng/png.h	2972;"	d
PNG_FILLER_AFTER	libpng/png.h	1770;"	d
PNG_FILLER_BEFORE	libpng/png.h	1769;"	d
PNG_FILTER_AVG	libpng/png.h	1970;"	d
PNG_FILTER_HEURISTIC_DEFAULT	libpng/png.h	2024;"	d
PNG_FILTER_HEURISTIC_LAST	libpng/png.h	2027;"	d
PNG_FILTER_HEURISTIC_UNWEIGHTED	libpng/png.h	2025;"	d
PNG_FILTER_HEURISTIC_WEIGHTED	libpng/png.h	2026;"	d
PNG_FILTER_NONE	libpng/png.h	1967;"	d
PNG_FILTER_PAETH	libpng/png.h	1971;"	d
PNG_FILTER_SUB	libpng/png.h	1968;"	d
PNG_FILTER_TYPE_BASE	libpng/png.h	1113;"	d
PNG_FILTER_TYPE_DEFAULT	libpng/png.h	1115;"	d
PNG_FILTER_UP	libpng/png.h	1969;"	d
PNG_FILTER_VALUE_AVG	libpng/png.h	1981;"	d
PNG_FILTER_VALUE_LAST	libpng/png.h	1983;"	d
PNG_FILTER_VALUE_NONE	libpng/png.h	1978;"	d
PNG_FILTER_VALUE_PAETH	libpng/png.h	1982;"	d
PNG_FILTER_VALUE_SUB	libpng/png.h	1979;"	d
PNG_FILTER_VALUE_UP	libpng/png.h	1980;"	d
PNG_FIXED_POINT_SUPPORTED	libpng/pngconf.h	595;"	d
PNG_FLAG_ADD_ALPHA	libpng/png.h	3023;"	d
PNG_FLAG_CRC_ANCILLARY_MASK	libpng/png.h	3034;"	d
PNG_FLAG_CRC_ANCILLARY_NOWARN	libpng/png.h	3011;"	d
PNG_FLAG_CRC_ANCILLARY_USE	libpng/png.h	3010;"	d
PNG_FLAG_CRC_CRITICAL_IGNORE	libpng/png.h	3013;"	d
PNG_FLAG_CRC_CRITICAL_MASK	libpng/png.h	3037;"	d
PNG_FLAG_CRC_CRITICAL_USE	libpng/png.h	3012;"	d
PNG_FLAG_CRC_MASK	libpng/png.h	3040;"	d
PNG_FLAG_FILLER_AFTER	libpng/png.h	3009;"	d
PNG_FLAG_FREE_HIST	libpng/png.h	3016;"	d
PNG_FLAG_FREE_PLTE	libpng/png.h	3014;"	d
PNG_FLAG_FREE_TRNS	libpng/png.h	3015;"	d
PNG_FLAG_KEEP_UNKNOWN_CHUNKS	libpng/png.h	3017;"	d
PNG_FLAG_KEEP_UNSAFE_CHUNKS	libpng/png.h	3018;"	d
PNG_FLAG_LIBRARY_MISMATCH	libpng/png.h	3019;"	d
PNG_FLAG_MALLOC_NULL_MEM_OK	libpng/png.h	3022;"	d
PNG_FLAG_MNG_EMPTY_PLTE	libpng/png.h	1256;"	d
PNG_FLAG_MNG_FILTER_64	libpng/png.h	1257;"	d
PNG_FLAG_ROW_INIT	libpng/png.h	3008;"	d
PNG_FLAG_STRIP_ALPHA	libpng/png.h	3024;"	d
PNG_FLAG_STRIP_ERROR_NUMBERS	libpng/png.h	3020;"	d
PNG_FLAG_STRIP_ERROR_TEXT	libpng/png.h	3021;"	d
PNG_FLAG_ZLIB_CUSTOM_LEVEL	libpng/png.h	3003;"	d
PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL	libpng/png.h	3004;"	d
PNG_FLAG_ZLIB_CUSTOM_METHOD	libpng/png.h	3006;"	d
PNG_FLAG_ZLIB_CUSTOM_STRATEGY	libpng/png.h	3002;"	d
PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS	libpng/png.h	3005;"	d
PNG_FLAG_ZLIB_FINISHED	libpng/png.h	3007;"	d
PNG_FLOATING_POINT_SUPPORTED	libpng/pngconf.h	165;"	d
PNG_FREE_ALL	libpng/png.h	2216;"	d
PNG_FREE_HIST	libpng/png.h	2205;"	d
PNG_FREE_ICCP	libpng/png.h	2206;"	d
PNG_FREE_LIST	libpng/png.h	2212;"	d
PNG_FREE_ME_SUPPORTED	libpng/pngconf.h	599;"	d
PNG_FREE_MUL	libpng/png.h	2217;"	d
PNG_FREE_PCAL	libpng/png.h	2209;"	d
PNG_FREE_PLTE	libpng/png.h	2213;"	d
PNG_FREE_ROWS	libpng/png.h	2208;"	d
PNG_FREE_SCAL	libpng/png.h	2210;"	d
PNG_FREE_SPLT	libpng/png.h	2207;"	d
PNG_FREE_TEXT	libpng/png.h	2215;"	d
PNG_FREE_TRNS	libpng/png.h	2214;"	d
PNG_FREE_UNKN	libpng/png.h	2211;"	d
PNG_GAMMA	libpng/png.h	2970;"	d
PNG_GAMMA_THRESHOLD	libpng/pngconf.h	492;"	d
PNG_GRAY_TO_RGB	libpng/png.h	2971;"	d
PNG_H	libpng/png.h	495;"	d
PNG_HANDLE_AS_UNKNOWN_SUPPORTED	libpng/pngconf.h	1069;"	d
PNG_HANDLE_AS_UNKNOWN_SUPPORTED	libpng/pngconf.h	1219;"	d
PNG_HANDLE_CHUNK_ALWAYS	libpng/png.h	2755;"	d
PNG_HANDLE_CHUNK_AS_DEFAULT	libpng/png.h	2752;"	d
PNG_HANDLE_CHUNK_IF_SAFE	libpng/png.h	2754;"	d
PNG_HANDLE_CHUNK_NEVER	libpng/png.h	2753;"	d
PNG_HAVE_CHUNK_AFTER_IDAT	libpng/png.h	2954;"	d
PNG_HAVE_CHUNK_HEADER	libpng/png.h	2949;"	d
PNG_HAVE_IDAT	libpng/png.h	2937;"	d
PNG_HAVE_IEND	libpng/png.h	2939;"	d
PNG_HAVE_IHDR	libpng/png.h	2935;"	d
PNG_HAVE_PLTE	libpng/png.h	2936;"	d
PNG_HAVE_PNG_SIGNATURE	libpng/png.h	2953;"	d
PNG_HAVE_cHRM	libpng/png.h	2947;"	d
PNG_HAVE_gAMA	libpng/png.h	2946;"	d
PNG_HAVE_sRGB	libpng/png.h	2948;"	d
PNG_HEADER_VERSION_STRING	libpng/png.h	505;"	d
PNG_HIMASK	libpng/pngwutil.c	2149;"	d	file:
PNG_HISHIFT	libpng/pngwutil.c	2147;"	d	file:
PNG_IDAT	libpng/png.h	3077;"	d
PNG_IEND	libpng/png.h	3078;"	d
PNG_IHDR	libpng/png.h	3076;"	d
PNG_IMPEXP	libpng/pngconf.h	1438;"	d
PNG_IMPEXP	libpng/pngconf.h	1439;"	d
PNG_IMPEXP	libpng/pngconf.h	1456;"	d
PNG_IMPEXP	libpng/pngconf.h	1473;"	d
PNG_IMPEXP	libpng/pngconf.h	1488;"	d
PNG_IMPEXP	libpng/pngconf.h	1490;"	d
PNG_IMPEXP	libpng/pngconf.h	1499;"	d
PNG_IMPEXP	libpng/pngconf.h	1501;"	d
PNG_IMPEXP	libpng/pngconf.h	1520;"	d
PNG_INFO_IDAT	libpng/png.h	1178;"	d
PNG_INFO_IMAGE_SUPPORTED	libpng/pngconf.h	1229;"	d
PNG_INFO_PLTE	libpng/png.h	1166;"	d
PNG_INFO_bKGD	libpng/png.h	1168;"	d
PNG_INFO_cHRM	libpng/png.h	1165;"	d
PNG_INFO_gAMA	libpng/png.h	1163;"	d
PNG_INFO_hIST	libpng/png.h	1169;"	d
PNG_INFO_iCCP	libpng/png.h	1175;"	d
PNG_INFO_oFFs	libpng/png.h	1171;"	d
PNG_INFO_pCAL	libpng/png.h	1173;"	d
PNG_INFO_pHYs	libpng/png.h	1170;"	d
PNG_INFO_sBIT	libpng/png.h	1164;"	d
PNG_INFO_sCAL	libpng/png.h	1177;"	d
PNG_INFO_sPLT	libpng/png.h	1176;"	d
PNG_INFO_sRGB	libpng/png.h	1174;"	d
PNG_INFO_tIME	libpng/png.h	1172;"	d
PNG_INFO_tRNS	libpng/png.h	1167;"	d
PNG_INTERLACE	libpng/png.h	2958;"	d
PNG_INTERLACE_ADAM7	libpng/png.h	1119;"	d
PNG_INTERLACE_LAST	libpng/png.h	1120;"	d
PNG_INTERLACE_NONE	libpng/png.h	1118;"	d
PNG_INTERNAL	libpng/png.c	14;"	d	file:
PNG_INTERNAL	libpng/pngerror.c	19;"	d	file:
PNG_INTERNAL	libpng/pngget.c	15;"	d	file:
PNG_INTERNAL	libpng/pngmem.c	20;"	d	file:
PNG_INTERNAL	libpng/pngpread.c	14;"	d	file:
PNG_INTERNAL	libpng/pngread.c	17;"	d	file:
PNG_INTERNAL	libpng/pngrio.c	21;"	d	file:
PNG_INTERNAL	libpng/pngrtran.c	19;"	d	file:
PNG_INTERNAL	libpng/pngrutil.c	17;"	d	file:
PNG_INTERNAL	libpng/pngset.c	19;"	d	file:
PNG_INTERNAL	libpng/pngtrans.c	14;"	d	file:
PNG_INTERNAL	libpng/pngwio.c	21;"	d	file:
PNG_INTERNAL	libpng/pngwrite.c	15;"	d	file:
PNG_INTERNAL	libpng/pngwtran.c	14;"	d	file:
PNG_INTERNAL	libpng/pngwutil.c	14;"	d	file:
PNG_INTRAPIXEL_DIFFERENCING	libpng/png.h	1114;"	d
PNG_INVERT_ALPHA	libpng/png.h	2976;"	d
PNG_INVERT_MONO	libpng/png.h	2962;"	d
PNG_ITXT_COMPRESSION_NONE	libpng/png.h	758;"	d
PNG_ITXT_COMPRESSION_zTXt	libpng/png.h	759;"	d
PNG_KEYWORD_MAX_LENGTH	libpng/png.h	1153;"	d
PNG_LIBPNG_BUILD_ALPHA	libpng/png.h	522;"	d
PNG_LIBPNG_BUILD_BASE_TYPE	libpng/png.h	536;"	d
PNG_LIBPNG_BUILD_BETA	libpng/png.h	523;"	d
PNG_LIBPNG_BUILD_PATCH	libpng/png.h	529;"	d
PNG_LIBPNG_BUILD_PRIVATE	libpng/png.h	531;"	d
PNG_LIBPNG_BUILD_RC	libpng/png.h	524;"	d
PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	libpng/png.h	526;"	d
PNG_LIBPNG_BUILD_SPECIAL	libpng/png.h	533;"	d
PNG_LIBPNG_BUILD_STABLE	libpng/png.h	525;"	d
PNG_LIBPNG_BUILD_TYPE	libpng/png.h	568;"	d
PNG_LIBPNG_BUILD_TYPE	libpng/png.h	572;"	d
PNG_LIBPNG_BUILD_TYPE	libpng/png.h	575;"	d
PNG_LIBPNG_VER	libpng/png.h	544;"	d
PNG_LIBPNG_VER_BUILD	libpng/png.h	519;"	d
PNG_LIBPNG_VER_DLLNUM	libpng/png.h	509;"	d
PNG_LIBPNG_VER_MAJOR	libpng/png.h	512;"	d
PNG_LIBPNG_VER_MINOR	libpng/png.h	513;"	d
PNG_LIBPNG_VER_RELEASE	libpng/png.h	514;"	d
PNG_LIBPNG_VER_SONUM	libpng/png.h	508;"	d
PNG_LIBPNG_VER_STRING	libpng/png.h	504;"	d
PNG_LITERAL_LEFT_SQUARE_BRACKET	libpng/pngconf.h	895;"	d
PNG_LITERAL_RIGHT_SQUARE_BRACKET	libpng/pngconf.h	898;"	d
PNG_LITERAL_SHARP	libpng/pngconf.h	892;"	d
PNG_LOMASK	libpng/pngwutil.c	2148;"	d	file:
PNG_MAXSUM	libpng/pngwutil.c	2146;"	d	file:
PNG_MAX_ERROR_TEXT	libpng/pngerror.c	159;"	d	file:
PNG_MAX_GAMMA_8	libpng/pngconf.h	485;"	d
PNG_MAX_MALLOC_64K	libpng/pngconf.h	1282;"	d
PNG_MAX_MALLOC_64K	libpng/pngconf.h	178;"	d
PNG_MAX_PALETTE_LENGTH	libpng/png.h	1156;"	d
PNG_MAX_UINT	libpng/png.h	1089;"	d
PNG_MMX_CODE_SUPPORTED	libpng/pngconf.h	840;"	d
PNG_MMX_FLAGS	libpng/png.h	2778;"	d
PNG_MMX_READ_FLAGS	libpng/png.h	2770;"	d
PNG_MMX_WRITE_FLAGS	libpng/png.h	2776;"	d
PNG_MNG_FEATURES_SUPPORTED	libpng/pngconf.h	159;"	d
PNG_NORETURN	libpng/pngconf.h	1561;"	d
PNG_NORETURN	libpng/pngconf.h	1596;"	d
PNG_NO_CONSOLE_IO	libpng/pngconf.h	279;"	d
PNG_NO_CONSOLE_IO	libpng/pngconf.h	290;"	d
PNG_NO_CONSOLE_IO	libpng/pngconf.h	297;"	d
PNG_NO_EXTERN	libpng/png.c	15;"	d	file:
PNG_NO_FILTERS	libpng/png.h	1966;"	d
PNG_NO_FIXED_POINT_SUPPORTED	libpng/pngconf.h	589;"	d
PNG_NO_FREE_ME	libpng/pngconf.h	569;"	d
PNG_NO_HANDLE_AS_UNKNOWN	libpng/pngconf.h	1063;"	d
PNG_NO_HANDLE_AS_UNKNOWN	libpng/pngconf.h	572;"	d
PNG_NO_INFO_IMAGE	libpng/pngconf.h	582;"	d
PNG_NO_MMX_CODE	libpng/pngconf.h	823;"	d
PNG_NO_MMX_CODE	libpng/pngconf.h	829;"	d
PNG_NO_MMX_CODE	libpng/pngconf.h	835;"	d
PNG_NO_MNG_FEATURES	libpng/pngconf.h	588;"	d
PNG_NO_MODULEDEF	libpng/pngconf.h	1451;"	d
PNG_NO_PEDANTIC_WARNINGS	libpng/png.c	16;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngerror.c	20;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngget.c	16;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngmem.c	21;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngpread.c	15;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngread.c	18;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngrio.c	22;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngrtran.c	20;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngrutil.c	18;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngset.c	20;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngtrans.c	15;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngwio.c	22;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngwrite.c	16;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngwtran.c	15;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	libpng/pngwutil.c	15;"	d	file:
PNG_NO_READ_EMPTY_PLTE	libpng/pngconf.h	587;"	d
PNG_NO_READ_RGB_TO_GRAY	libpng/pngconf.h	583;"	d
PNG_NO_READ_UNKNOWN_CHUNKS	libpng/pngconf.h	1060;"	d
PNG_NO_READ_UNKNOWN_CHUNKS	libpng/pngconf.h	570;"	d
PNG_NO_READ_USER_CHUNKS	libpng/pngconf.h	573;"	d
PNG_NO_READ_USER_TRANSFORM	libpng/pngconf.h	584;"	d
PNG_NO_READ_iCCP	libpng/pngconf.h	574;"	d
PNG_NO_READ_iTXt	libpng/pngconf.h	546;"	d
PNG_NO_READ_iTXt	libpng/pngconf.h	576;"	d
PNG_NO_READ_iTXt	libpng/pngconf.h	962;"	d
PNG_NO_READ_sCAL	libpng/pngconf.h	578;"	d
PNG_NO_READ_sPLT	libpng/pngconf.h	580;"	d
PNG_NO_READ_tEXt	libpng/pngconf.h	963;"	d
PNG_NO_READ_zTXt	libpng/pngconf.h	964;"	d
PNG_NO_USER_MEM	libpng/pngconf.h	586;"	d
PNG_NO_WRITE_UNKNOWN_CHUNKS	libpng/pngconf.h	571;"	d
PNG_NO_WRITE_USER_TRANSFORM	libpng/pngconf.h	585;"	d
PNG_NO_WRITE_iCCP	libpng/pngconf.h	575;"	d
PNG_NO_WRITE_iTXt	libpng/pngconf.h	1077;"	d
PNG_NO_WRITE_iTXt	libpng/pngconf.h	549;"	d
PNG_NO_WRITE_iTXt	libpng/pngconf.h	577;"	d
PNG_NO_WRITE_sCAL	libpng/pngconf.h	579;"	d
PNG_NO_WRITE_sPLT	libpng/pngconf.h	581;"	d
PNG_NO_WRITE_tEXt	libpng/pngconf.h	1078;"	d
PNG_NO_WRITE_zTXt	libpng/pngconf.h	1079;"	d
PNG_NO_iTXt_SUPPORTED	libpng/pngconf.h	543;"	d
PNG_OFFSET_LAST	libpng/png.h	1125;"	d
PNG_OFFSET_MICROMETER	libpng/png.h	1124;"	d
PNG_OFFSET_PIXEL	libpng/png.h	1123;"	d
PNG_OPTIMIZED_CODE_SUPPORTED	libpng/pngconf.h	811;"	d
PNG_OUT_OF_RANGE	libpng/png.h	3060;"	d
PNG_PACK	libpng/png.h	2959;"	d
PNG_PACKSWAP	libpng/png.h	2973;"	d
PNG_PEDANTIC_WARNINGS_SUPPORTED	libpng/pngconf.h	1546;"	d
PNG_PLTE	libpng/png.h	3079;"	d
PNG_POINTER_INDEXING_SUPPORTED	libpng/pngconf.h	932;"	d
PNG_PREMULTIPLY_ALPHA	libpng/png.h	2984;"	d
PNG_PRIVATE	libpng/pngconf.h	1582;"	d
PNG_PRIVATE	libpng/pngconf.h	1605;"	d
PNG_PROGRESSIVE_READ_SUPPORTED	libpng/pngconf.h	669;"	d
PNG_READ_16_TO_8_SUPPORTED	libpng/pngconf.h	638;"	d
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED	libpng/pngconf.h	950;"	d
PNG_READ_BACKGROUND_SUPPORTED	libpng/pngconf.h	635;"	d
PNG_READ_BGR_SUPPORTED	libpng/pngconf.h	620;"	d
PNG_READ_CHUNK_MODE	libpng/pngpread.c	21;"	d	file:
PNG_READ_COMPOSITE_NODIV_SUPPORTED	libpng/pngconf.h	685;"	d
PNG_READ_DITHER_SUPPORTED	libpng/pngconf.h	632;"	d
PNG_READ_DONE_MODE	libpng/pngpread.c	26;"	d	file:
PNG_READ_EMPTY_PLTE_SUPPORTED	libpng/pngconf.h	693;"	d
PNG_READ_EXPAND_SUPPORTED	libpng/pngconf.h	611;"	d
PNG_READ_FILLER_SUPPORTED	libpng/pngconf.h	641;"	d
PNG_READ_GAMMA_SUPPORTED	libpng/pngconf.h	644;"	d
PNG_READ_GRAY_TO_RGB_SUPPORTED	libpng/pngconf.h	647;"	d
PNG_READ_IDAT_MODE	libpng/pngpread.c	22;"	d	file:
PNG_READ_INTERLACING_SUPPORTED	libpng/pngconf.h	672;"	d
PNG_READ_INTERLACING_SUPPORTED	libpng/pngconf.h	681;"	d
PNG_READ_INVERT_ALPHA_SUPPORTED	libpng/pngconf.h	653;"	d
PNG_READ_INVERT_SUPPORTED	libpng/pngconf.h	629;"	d
PNG_READ_OPT_PLTE_SUPPORTED	libpng/pngconf.h	1039;"	d
PNG_READ_PACKSWAP_SUPPORTED	libpng/pngconf.h	626;"	d
PNG_READ_PACK_SUPPORTED	libpng/pngconf.h	617;"	d
PNG_READ_RGB_TO_GRAY_SUPPORTED	libpng/pngconf.h	662;"	d
PNG_READ_SHIFT_SUPPORTED	libpng/pngconf.h	614;"	d
PNG_READ_SIG_MODE	libpng/pngpread.c	20;"	d	file:
PNG_READ_STRIP_ALPHA_SUPPORTED	libpng/pngconf.h	656;"	d
PNG_READ_SUPPORTED	libpng/pngconf.h	121;"	d
PNG_READ_SWAP_ALPHA_SUPPORTED	libpng/pngconf.h	650;"	d
PNG_READ_SWAP_SUPPORTED	libpng/pngconf.h	623;"	d
PNG_READ_TEXT_SUPPORTED	libpng/pngconf.h	1043;"	d
PNG_READ_TRANSFORMS_SUPPORTED	libpng/pngconf.h	606;"	d
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED	libpng/pngconf.h	1050;"	d
PNG_READ_USER_CHUNKS_SUPPORTED	libpng/pngconf.h	1057;"	d
PNG_READ_USER_TRANSFORM_SUPPORTED	libpng/pngconf.h	659;"	d
PNG_READ_bKGD_SUPPORTED	libpng/pngconf.h	967;"	d
PNG_READ_cHRM_SUPPORTED	libpng/pngconf.h	971;"	d
PNG_READ_gAMA_SUPPORTED	libpng/pngconf.h	975;"	d
PNG_READ_hIST_SUPPORTED	libpng/pngconf.h	979;"	d
PNG_READ_iCCP_SUPPORTED	libpng/pngconf.h	983;"	d
PNG_READ_iTXt	libpng/pngconf.h	555;"	d
PNG_READ_iTXt_MODE	libpng/pngpread.c	27;"	d	file:
PNG_READ_iTXt_SUPPORTED	libpng/pngconf.h	988;"	d
PNG_READ_oFFs_SUPPORTED	libpng/pngconf.h	995;"	d
PNG_READ_pCAL_SUPPORTED	libpng/pngconf.h	999;"	d
PNG_READ_pHYs_SUPPORTED	libpng/pngconf.h	1007;"	d
PNG_READ_sBIT_SUPPORTED	libpng/pngconf.h	1011;"	d
PNG_READ_sCAL_SUPPORTED	libpng/pngconf.h	1003;"	d
PNG_READ_sPLT_SUPPORTED	libpng/pngconf.h	1015;"	d
PNG_READ_sRGB_SUPPORTED	libpng/pngconf.h	1019;"	d
PNG_READ_tEXt_MODE	libpng/pngpread.c	24;"	d	file:
PNG_READ_tEXt_SUPPORTED	libpng/pngconf.h	1023;"	d
PNG_READ_tIME_SUPPORTED	libpng/pngconf.h	1027;"	d
PNG_READ_tRNS_SUPPORTED	libpng/pngconf.h	1031;"	d
PNG_READ_zTXt_MODE	libpng/pngpread.c	25;"	d	file:
PNG_READ_zTXt_SUPPORTED	libpng/pngconf.h	1035;"	d
PNG_RESOLUTION_LAST	libpng/png.h	1143;"	d
PNG_RESOLUTION_METER	libpng/png.h	1142;"	d
PNG_RESOLUTION_UNKNOWN	libpng/png.h	1141;"	d
PNG_RGBA	libpng/png.h	2968;"	d
PNG_RGB_TO_GRAY	libpng/png.h	2980;"	d
PNG_RGB_TO_GRAY_ERR	libpng/png.h	2978;"	d
PNG_RGB_TO_GRAY_WARN	libpng/png.h	2979;"	d
PNG_ROWBYTES	libpng/png.h	3050;"	d
PNG_SAVE_BSD_SOURCE	libpng/pngconf.h	376;"	d
PNG_SAVE_BSD_SOURCE	libpng/pngconf.h	397;"	d
PNG_SCALE_LAST	libpng/png.h	1138;"	d
PNG_SCALE_METER	libpng/png.h	1136;"	d
PNG_SCALE_RADIAN	libpng/png.h	1137;"	d
PNG_SCALE_UNKNOWN	libpng/png.h	1135;"	d
PNG_SELECT_READ	libpng/png.h	2783;"	d
PNG_SELECT_WRITE	libpng/png.h	2784;"	d
PNG_SEQUENTIAL_READ_SUPPORTED	libpng/pngconf.h	678;"	d
PNG_SETJMP_SUPPORTED	libpng/pngconf.h	359;"	d
PNG_SET_USER_LIMITS_SUPPORTED	libpng/pngconf.h	857;"	d
PNG_SET_WILL_FREE_DATA	libpng/png.h	2202;"	d
PNG_SHIFT	libpng/png.h	2960;"	d
PNG_SIZE_MAX	libpng/png.h	1086;"	d
PNG_SKIP_MODE	libpng/pngpread.c	23;"	d	file:
PNG_STATIC	libpng/pngconf.h	226;"	d
PNG_STATIC	libpng/pngconf.h	231;"	d
PNG_STDIO_SUPPORTED	libpng/pngconf.h	273;"	d
PNG_STRING_NEWLINE	libpng/pngconf.h	903;"	d
PNG_STRIP_ALPHA	libpng/png.h	2975;"	d
PNG_STRUCT_INFO	libpng/png.h	2993;"	d
PNG_STRUCT_PNG	libpng/png.h	2992;"	d
PNG_SWAP_ALPHA	libpng/png.h	2974;"	d
PNG_SWAP_BYTES	libpng/png.h	2961;"	d
PNG_TEXT_COMPRESSION_LAST	libpng/png.h	760;"	d
PNG_TEXT_COMPRESSION_NONE	libpng/png.h	756;"	d
PNG_TEXT_COMPRESSION_NONE_WR	libpng/png.h	754;"	d
PNG_TEXT_COMPRESSION_zTXt	libpng/png.h	757;"	d
PNG_TEXT_COMPRESSION_zTXt_WR	libpng/png.h	755;"	d
PNG_TEXT_SUPPORTED	libpng/pngconf.h	1044;"	d
PNG_TEXT_SUPPORTED	libpng/pngconf.h	1189;"	d
PNG_TIME_RFC1123_SUPPORTED	libpng/pngconf.h	781;"	d
PNG_TRANSFORM_BGR	libpng/png.h	1244;"	d
PNG_TRANSFORM_EXPAND	libpng/png.h	1241;"	d
PNG_TRANSFORM_GRAY_TO_RGB	libpng/png.h	1253;"	d
PNG_TRANSFORM_IDENTITY	libpng/png.h	1236;"	d
PNG_TRANSFORM_INVERT_ALPHA	libpng/png.h	1247;"	d
PNG_TRANSFORM_INVERT_MONO	libpng/png.h	1242;"	d
PNG_TRANSFORM_PACKING	libpng/png.h	1239;"	d
PNG_TRANSFORM_PACKSWAP	libpng/png.h	1240;"	d
PNG_TRANSFORM_SHIFT	libpng/png.h	1243;"	d
PNG_TRANSFORM_STRIP_16	libpng/png.h	1237;"	d
PNG_TRANSFORM_STRIP_ALPHA	libpng/png.h	1238;"	d
PNG_TRANSFORM_STRIP_FILLER	libpng/png.h	1248;"	d
PNG_TRANSFORM_STRIP_FILLER_AFTER	libpng/png.h	1251;"	d
PNG_TRANSFORM_STRIP_FILLER_BEFORE	libpng/png.h	1250;"	d
PNG_TRANSFORM_SWAP_ALPHA	libpng/png.h	1245;"	d
PNG_TRANSFORM_SWAP_ENDIAN	libpng/png.h	1246;"	d
PNG_TYPECAST_NULL	libpng/pngconf.h	331;"	d
PNG_UINT_31_MAX	libpng/png.h	1084;"	d
PNG_UINT_32_MAX	libpng/png.h	1085;"	d
PNG_UNKNOWN_CHUNKS_SUPPORTED	libpng/pngconf.h	1052;"	d
PNG_UNKNOWN_CHUNKS_SUPPORTED	libpng/pngconf.h	1213;"	d
PNG_UNUSED	libpng/pngconf.h	97;"	d
PNG_USER_CHUNKS_SUPPORTED	libpng/pngconf.h	1058;"	d
PNG_USER_CHUNK_CACHE_MAX	libpng/pngconf.h	883;"	d
PNG_USER_CHUNK_MALLOC_MAX	libpng/pngconf.h	888;"	d
PNG_USER_HEIGHT_MAX	libpng/pngconf.h	876;"	d
PNG_USER_LIMITS_SUPPORTED	libpng/pngconf.h	865;"	d
PNG_USER_MEM_SUPPORTED	libpng/pngconf.h	849;"	d
PNG_USER_PRIVATEBUILD	libpng/pngconf.h	31;"	d
PNG_USER_PRIVATEBUILD	libpng/pngconf.h	73;"	d
PNG_USER_TRANSFORM	libpng/png.h	2977;"	d
PNG_USER_TRANSFORM_PTR_SUPPORTED	libpng/pngconf.h	776;"	d
PNG_USER_WIDTH_MAX	libpng/pngconf.h	873;"	d
PNG_USER_WILL_FREE_DATA	libpng/png.h	2203;"	d
PNG_USE_DLL	libpng/pngconf.h	220;"	d
PNG_USE_DLL	libpng/pngconf.h	234;"	d
PNG_USE_DLL	libpng/pngconf.h	242;"	d
PNG_USE_DLL	libpng/pngconf.h	249;"	d
PNG_USE_GLOBAL_ARRAYS	libpng/pngconf.h	1405;"	d
PNG_USE_GLOBAL_ARRAYS	libpng/pngconf.h	1413;"	d
PNG_USE_GLOBAL_ARRAYS	libpng/pngconf.h	1431;"	d
PNG_USE_LOCAL_ARRAYS	libpng/pngconf.h	1408;"	d
PNG_USE_LOCAL_ARRAYS	libpng/pngconf.h	1418;"	d
PNG_USE_LOCAL_ARRAYS	libpng/pngconf.h	1429;"	d
PNG_USE_RESULT	libpng/pngconf.h	1558;"	d
PNG_USE_RESULT	libpng/pngconf.h	1593;"	d
PNG_WARNINGS_SUPPORTED	libpng/pngconf.h	143;"	d
PNG_WARN_UNINITIALIZED_ROW	libpng/pngconf.h	85;"	d
PNG_WEIGHT_FACTOR	libpng/png.h	2997;"	d
PNG_WEIGHT_SHIFT	libpng/png.h	2996;"	d
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED	libpng/pngconf.h	956;"	d
PNG_WRITE_BGR_SUPPORTED	libpng/pngconf.h	714;"	d
PNG_WRITE_EMPTY_PLTE_SUPPORTED	libpng/pngconf.h	761;"	d
PNG_WRITE_FILLER_SUPPORTED	libpng/pngconf.h	726;"	d
PNG_WRITE_FILTER_SUPPORTED	libpng/pngconf.h	1207;"	d
PNG_WRITE_FLUSH_SUPPORTED	libpng/pngconf.h	755;"	d
PNG_WRITE_INTERLACING_SUPPORTED	libpng/pngconf.h	743;"	d
PNG_WRITE_INVERT_ALPHA_SUPPORTED	libpng/pngconf.h	733;"	d
PNG_WRITE_INVERT_SUPPORTED	libpng/pngconf.h	723;"	d
PNG_WRITE_PACKSWAP_SUPPORTED	libpng/pngconf.h	720;"	d
PNG_WRITE_PACK_SUPPORTED	libpng/pngconf.h	711;"	d
PNG_WRITE_SHIFT_SUPPORTED	libpng/pngconf.h	708;"	d
PNG_WRITE_SUPPORTED	libpng/pngconf.h	127;"	d
PNG_WRITE_SWAP_ALPHA_SUPPORTED	libpng/pngconf.h	729;"	d
PNG_WRITE_SWAP_SUPPORTED	libpng/pngconf.h	717;"	d
PNG_WRITE_TEXT_SUPPORTED	libpng/pngconf.h	1187;"	d
PNG_WRITE_TRANSFORMS_SUPPORTED	libpng/pngconf.h	703;"	d
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED	libpng/pngconf.h	1211;"	d
PNG_WRITE_USER_TRANSFORM_SUPPORTED	libpng/pngconf.h	737;"	d
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED	libpng/pngconf.h	751;"	d
PNG_WRITE_bKGD_SUPPORTED	libpng/pngconf.h	1082;"	d
PNG_WRITE_cHRM_SUPPORTED	libpng/pngconf.h	1088;"	d
PNG_WRITE_gAMA_SUPPORTED	libpng/pngconf.h	1094;"	d
PNG_WRITE_hIST_SUPPORTED	libpng/pngconf.h	1100;"	d
PNG_WRITE_iCCP_SUPPORTED	libpng/pngconf.h	1106;"	d
PNG_WRITE_iTXt	libpng/pngconf.h	558;"	d
PNG_WRITE_iTXt_SUPPORTED	libpng/pngconf.h	1113;"	d
PNG_WRITE_oFFs_SUPPORTED	libpng/pngconf.h	1120;"	d
PNG_WRITE_pCAL_SUPPORTED	libpng/pngconf.h	1126;"	d
PNG_WRITE_pHYs_SUPPORTED	libpng/pngconf.h	1138;"	d
PNG_WRITE_sBIT_SUPPORTED	libpng/pngconf.h	1144;"	d
PNG_WRITE_sCAL_SUPPORTED	libpng/pngconf.h	1132;"	d
PNG_WRITE_sPLT_SUPPORTED	libpng/pngconf.h	1150;"	d
PNG_WRITE_sRGB_SUPPORTED	libpng/pngconf.h	1156;"	d
PNG_WRITE_tEXt_SUPPORTED	libpng/pngconf.h	1162;"	d
PNG_WRITE_tIME_SUPPORTED	libpng/pngconf.h	1168;"	d
PNG_WRITE_tRNS_SUPPORTED	libpng/pngconf.h	1174;"	d
PNG_WRITE_zTXt_SUPPORTED	libpng/pngconf.h	1180;"	d
PNG_WROTE_INFO_BEFORE_PLTE	libpng/png.h	2951;"	d
PNG_WROTE_tIME	libpng/png.h	2950;"	d
PNG_ZBUF_SIZE	libpng/pngconf.h	115;"	d
PNG_ZBUF_SIZE	libpng/pngconf.h	1670;"	d
PNG_ZBUF_SIZE	libpng/pngconf.h	1671;"	d
PNG_bKGD	libpng/png.h	3080;"	d
PNG_bKGD_SUPPORTED	libpng/pngconf.h	1084;"	d
PNG_bKGD_SUPPORTED	libpng/pngconf.h	968;"	d
PNG_cHRM	libpng/png.h	3081;"	d
PNG_cHRM_SUPPORTED	libpng/pngconf.h	1090;"	d
PNG_cHRM_SUPPORTED	libpng/pngconf.h	972;"	d
PNG_gAMA	libpng/png.h	3082;"	d
PNG_gAMA_SUPPORTED	libpng/pngconf.h	1096;"	d
PNG_gAMA_SUPPORTED	libpng/pngconf.h	976;"	d
PNG_hIST	libpng/png.h	3083;"	d
PNG_hIST_SUPPORTED	libpng/pngconf.h	1102;"	d
PNG_hIST_SUPPORTED	libpng/pngconf.h	980;"	d
PNG_iCCP	libpng/png.h	3084;"	d
PNG_iCCP_SUPPORTED	libpng/pngconf.h	1108;"	d
PNG_iCCP_SUPPORTED	libpng/pngconf.h	984;"	d
PNG_iTXt	libpng/png.h	3085;"	d
PNG_iTXt_SUPPORTED	libpng/pngconf.h	1116;"	d
PNG_iTXt_SUPPORTED	libpng/pngconf.h	991;"	d
PNG_oFFs	libpng/png.h	3086;"	d
PNG_oFFs_SUPPORTED	libpng/pngconf.h	1122;"	d
PNG_oFFs_SUPPORTED	libpng/pngconf.h	996;"	d
PNG_pCAL	libpng/png.h	3087;"	d
PNG_pCAL_SUPPORTED	libpng/pngconf.h	1000;"	d
PNG_pCAL_SUPPORTED	libpng/pngconf.h	1128;"	d
PNG_pHYs	libpng/png.h	3089;"	d
PNG_pHYs_SUPPORTED	libpng/pngconf.h	1008;"	d
PNG_pHYs_SUPPORTED	libpng/pngconf.h	1140;"	d
PNG_sBIT	libpng/png.h	3090;"	d
PNG_sBIT_SUPPORTED	libpng/pngconf.h	1012;"	d
PNG_sBIT_SUPPORTED	libpng/pngconf.h	1146;"	d
PNG_sCAL	libpng/png.h	3088;"	d
PNG_sCAL_SUPPORTED	libpng/pngconf.h	1004;"	d
PNG_sCAL_SUPPORTED	libpng/pngconf.h	1134;"	d
PNG_sPLT	libpng/png.h	3091;"	d
PNG_sPLT_SUPPORTED	libpng/pngconf.h	1016;"	d
PNG_sPLT_SUPPORTED	libpng/pngconf.h	1152;"	d
PNG_sRGB	libpng/png.h	3092;"	d
PNG_sRGB_INTENT_ABSOLUTE	libpng/png.h	1149;"	d
PNG_sRGB_INTENT_LAST	libpng/png.h	1150;"	d
PNG_sRGB_INTENT_PERCEPTUAL	libpng/png.h	1146;"	d
PNG_sRGB_INTENT_RELATIVE	libpng/png.h	1147;"	d
PNG_sRGB_INTENT_SATURATION	libpng/png.h	1148;"	d
PNG_sRGB_SUPPORTED	libpng/pngconf.h	1020;"	d
PNG_sRGB_SUPPORTED	libpng/pngconf.h	1158;"	d
PNG_tEXt	libpng/png.h	3093;"	d
PNG_tEXt_SUPPORTED	libpng/pngconf.h	1024;"	d
PNG_tEXt_SUPPORTED	libpng/pngconf.h	1164;"	d
PNG_tIME	libpng/png.h	3094;"	d
PNG_tIME_SUPPORTED	libpng/pngconf.h	1028;"	d
PNG_tIME_SUPPORTED	libpng/pngconf.h	1170;"	d
PNG_tRNS	libpng/png.h	3095;"	d
PNG_tRNS_SUPPORTED	libpng/pngconf.h	1032;"	d
PNG_tRNS_SUPPORTED	libpng/pngconf.h	1176;"	d
PNG_zTXt	libpng/png.h	3096;"	d
PNG_zTXt_SUPPORTED	libpng/pngconf.h	1036;"	d
PNG_zTXt_SUPPORTED	libpng/pngconf.h	1182;"	d
PRESET_DICT	zlib/zutil.h	83;"	d
PULL	zlib/infback.c	149;"	d	file:
PULLBYTE	zlib/infback.c	163;"	d	file:
PULLBYTE	zlib/inflate.c	468;"	d	file:
PUP	zlib/inffast.c	26;"	d	file:
PUP	zlib/inffast.c	29;"	d	file:
Pos	zlib/deflate.h	/^typedef ush Pos;$/;"	t
Posf	zlib/deflate.h	/^typedef Pos FAR Posf;$/;"	t
REPZ_11_138	zlib/trees.c	59;"	d	file:
REPZ_3_10	zlib/trees.c	56;"	d	file:
REP_3_6	zlib/trees.c	53;"	d	file:
RESTORE	zlib/infback.c	130;"	d	file:
RESTORE	zlib/inflate.c	449;"	d	file:
REV	zlib/crc32.c	56;"	d	file:
REVERSE	zlib/inflate.c	503;"	d	file:
RGBtoHSV	pngwriter.cpp	/^void pngwriter::RGBtoHSV( float r, float g, float b, float *h, float *s, float *v )$/;"	f	class:pngwriter
ROOM	zlib/infback.c	201;"	d	file:
SEEK_CUR	zlib/zconf.h	384;"	d
SEEK_END	zlib/zconf.h	385;"	d
SEEK_SET	zlib/zconf.h	383;"	d
SEPARATOR	zlib/trees.c	329;"	d	file:
SMALLEST	zlib/trees.c	429;"	d	file:
SMALL_MEDIUM	zlib/zconf.h	255;"	d
SMALL_MEDIUM	zlib/zconf.h	264;"	d
STATIC_TREES	zlib/zutil.h	75;"	d
STDC	zlib/zconf.h	169;"	d
STDC	zlib/zconf.h	178;"	d
STDC	zlib/zconf.h	181;"	d
STDC	zlib/zconf.h	184;"	d
STDC	zlib/zconf.h	187;"	d
STDC	zlib/zconf.h	191;"	d
STDC99	zlib/zconf.h	173;"	d
STORED	zlib/inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon3
STORED_BLOCK	zlib/zutil.h	74;"	d
SYNC	zlib/inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon3
SYS16BIT	zlib/zconf.h	151;"	d
StripComments	zlib/zlib2ansi	/^sub StripComments$/;"	s
TABLE	zlib/inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon3
TBLS	zlib/crc32.c	62;"	d	file:
TBLS	zlib/crc32.c	64;"	d	file:
TIME	zlib/inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon3
TOO_FAR	zlib/deflate.c	108;"	d	file:
TRY_FREE	zlib/zutil.h	285;"	d
TYPE	zlib/inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon3
TYPEDO	zlib/inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon3
Trace	zlib/zutil.h	264;"	d
Trace	zlib/zutil.h	271;"	d
Tracec	zlib/zutil.h	267;"	d
Tracec	zlib/zutil.h	274;"	d
Tracecv	zlib/zutil.h	268;"	d
Tracecv	zlib/zutil.h	275;"	d
Tracev	zlib/zutil.h	265;"	d
Tracev	zlib/zutil.h	272;"	d
Tracevv	zlib/zutil.h	266;"	d
Tracevv	zlib/zutil.h	273;"	d
UNALIGNED_OK	zlib/zconf.h	164;"	d
UPDATE	zlib/inflate.c	412;"	d	file:
UPDATE	zlib/inflate.c	415;"	d	file:
UPDATE_HASH	zlib/deflate.c	164;"	d	file:
USE_FAR_KEYWORD	libpng/pngconf.h	1287;"	d
USE_FAR_KEYWORD	libpng/pngconf.h	1306;"	d
WIN32	zlib/zconf.h	145;"	d
WIN32_WCE_OLD	libpng/pngrutil.c	23;"	d	file:
WINDOWS	zlib/zconf.h	141;"	d
WIN_INIT	zlib/deflate.h	288;"	d
Your_png_h_is_not_version_1_2_53	libpng/png.c	/^typedef version_1_2_53 Your_png_h_is_not_version_1_2_53;$/;"	t	file:
ZALLOC	zlib/zutil.h	282;"	d
ZCONF_H	zlib/zconf.h	9;"	d
ZEXPORT	zlib/zconf.h	297;"	d
ZEXPORT	zlib/zconf.h	309;"	d
ZEXPORT	zlib/zconf.h	312;"	d
ZEXPORT	zlib/zconf.h	326;"	d
ZEXPORTVA	zlib/zconf.h	299;"	d
ZEXPORTVA	zlib/zconf.h	301;"	d
ZEXPORTVA	zlib/zconf.h	310;"	d
ZEXPORTVA	zlib/zconf.h	313;"	d
ZEXPORTVA	zlib/zconf.h	329;"	d
ZEXTERN	zlib/zconf.h	280;"	d
ZEXTERN	zlib/zconf.h	282;"	d
ZEXTERN	zlib/zconf.h	319;"	d
ZEXTERN	zlib/zconf.h	323;"	d
ZFREE	zlib/zutil.h	284;"	d
ZLIB_H	zlib/zlib.h	32;"	d
ZLIB_INTERNAL	zlib/compress.c	8;"	d	file:
ZLIB_INTERNAL	zlib/gzguts.h	15;"	d
ZLIB_INTERNAL	zlib/uncompr.c	8;"	d	file:
ZLIB_INTERNAL	zlib/zutil.h	16;"	d
ZLIB_VERNUM	zlib/zlib.h	41;"	d
ZLIB_VERSION	zlib/zlib.h	40;"	d
ZLIB_VER_MAJOR	zlib/zlib.h	42;"	d
ZLIB_VER_MINOR	zlib/zlib.h	43;"	d
ZLIB_VER_REVISION	zlib/zlib.h	44;"	d
ZLIB_VER_SUBREVISION	zlib/zlib.h	45;"	d
ZUTIL_H	zlib/zutil.h	14;"	d
Z_ASCII	zlib/zlib.h	201;"	d
Z_BEST_COMPRESSION	zlib/zlib.h	188;"	d
Z_BEST_SPEED	zlib/zlib.h	187;"	d
Z_BINARY	zlib/zlib.h	199;"	d
Z_BLOCK	zlib/zlib.h	169;"	d
Z_BUF_ERROR	zlib/zlib.h	180;"	d
Z_DATA_ERROR	zlib/zlib.h	178;"	d
Z_DEFAULT_COMPRESSION	zlib/zlib.h	189;"	d
Z_DEFAULT_STRATEGY	zlib/zlib.h	196;"	d
Z_DEFLATED	zlib/zlib.h	205;"	d
Z_ERRNO	zlib/zlib.h	176;"	d
Z_FILTERED	zlib/zlib.h	192;"	d
Z_FINISH	zlib/zlib.h	168;"	d
Z_FIXED	zlib/zlib.h	195;"	d
Z_FULL_FLUSH	zlib/zlib.h	167;"	d
Z_HAVE_UNISTD_H	zlib/zconf.h	364;"	d
Z_HUFFMAN_ONLY	zlib/zlib.h	193;"	d
Z_MEM_ERROR	zlib/zlib.h	179;"	d
Z_NEED_DICT	zlib/zlib.h	175;"	d
Z_NO_COMPRESSION	zlib/zlib.h	186;"	d
Z_NO_FLUSH	zlib/zlib.h	164;"	d
Z_NULL	zlib/zlib.h	208;"	d
Z_OK	zlib/zlib.h	173;"	d
Z_PARTIAL_FLUSH	zlib/zlib.h	165;"	d
Z_RLE	zlib/zlib.h	194;"	d
Z_STREAM_END	zlib/zlib.h	174;"	d
Z_STREAM_ERROR	zlib/zlib.h	177;"	d
Z_SYNC_FLUSH	zlib/zlib.h	166;"	d
Z_TEXT	zlib/zlib.h	200;"	d
Z_TREES	zlib/zlib.h	170;"	d
Z_UNKNOWN	zlib/zlib.h	202;"	d
Z_VERSION_ERROR	zlib/zlib.h	181;"	d
_BSD_SOURCE	libpng/pngconf.h	377;"	d
_BSD_SOURCE	libpng/pngconf.h	395;"	d
_DEBUG	libpng/png.h	2645;"	d
_FILE_OFFSET_BITS	zlib/gzguts.h	11;"	d
_LARGEFILE_SOURCE	zlib/gzguts.h	8;"	d
_PTRDIFF_T_DEFINED	zlib/zutil.h	157;"	d
_dist_code	zlib/trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_dist_code	zlib/trees.h	/^const uch _dist_code[DIST_CODE_LEN] = {$/;"	v
_dist_code	zlib/zconf.h	20;"	d
_halloc	zlib/zutil.c	271;"	d	file:
_hfree	zlib/zutil.c	272;"	d	file:
_length_code	zlib/trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_length_code	zlib/trees.h	/^const uch _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
_length_code	zlib/zconf.h	21;"	d
_tr_align	zlib/trees.c	/^void _tr_align(s)$/;"	f
_tr_align	zlib/zconf.h	22;"	d
_tr_flush_block	zlib/trees.c	/^void _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_flush_block	zlib/zconf.h	23;"	d
_tr_init	zlib/trees.c	/^void _tr_init(s)$/;"	f
_tr_init	zlib/zconf.h	24;"	d
_tr_stored_block	zlib/trees.c	/^void _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_stored_block	zlib/zconf.h	25;"	d
_tr_tally	zlib/trees.c	/^int _tr_tally (s, dist, lc)$/;"	f
_tr_tally	zlib/zconf.h	26;"	d
_tr_tally_dist	zlib/deflate.h	326;"	d
_tr_tally_dist	zlib/deflate.h	338;"	d
_tr_tally_lit	zlib/deflate.h	319;"	d
_tr_tally_lit	zlib/deflate.h	337;"	d
adler	zlib/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s
adler32	zlib/adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32	zlib/zconf.h	27;"	d
adler32_combine	zlib/adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine	zlib/zconf.h	28;"	d
adler32_combine	zlib/zlib.h	1573;"	d
adler32_combine64	zlib/adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine64	zlib/zconf.h	29;"	d
adler32_combine_	zlib/adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
alloc_func	zlib/zconf.h	111;"	d
alloc_func	zlib/zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
alpha	libpng/png.h	/^   png_byte alpha; \/* for alpha channel files *\/$/;"	m	struct:png_color_8_struct
alpha	libpng/png.h	/^   png_uint_16 alpha;$/;"	m	struct:png_sPLT_entry_struct
arrow	pngwriter.cpp	/^void pngwriter::arrow( int x1,int y1,int x2,int y2,int size, double head_angle, double red, double green, double blue)$/;"	f	class:pngwriter
arrow	pngwriter.cpp	/^void pngwriter::arrow( int x1,int y1,int x2,int y2,int size, double head_angle, int red, int green, int blue)$/;"	f	class:pngwriter
avail_in	zlib/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s
avail_out	zlib/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s
back	zlib/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state
backgroundcolour_	pngwriter.h	/^   int  backgroundcolour_;$/;"	m	class:pngwriter
base_dist	zlib/trees.c	/^local int base_dist[D_CODES];$/;"	v
base_dist	zlib/trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_length	zlib/trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
base_length	zlib/trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
bezier	pngwriter.cpp	/^void pngwriter::bezier(  int startPtX, int startPtY,$/;"	f	class:pngwriter
bezier_blend	pngwriter.cpp	/^void pngwriter::bezier_blend(  int startPtX, int startPtY,$/;"	f	class:pngwriter
bi_buf	zlib/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state
bi_flush	zlib/trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	zlib/trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_valid	zlib/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state
bi_windup	zlib/trees.c	/^local void bi_windup(s)$/;"	f
bilinear_interpolation_dread	pngwriter.cpp	/^double pngwriter::bilinear_interpolation_dread(double x, double y, int colour)$/;"	f	class:pngwriter
bilinear_interpolation_read	pngwriter.cpp	/^int pngwriter::bilinear_interpolation_read(double x, double y, int colour)$/;"	f	class:pngwriter
bit_depth	libpng/png.h	/^   png_byte bit_depth; \/* bit depth of row *\/$/;"	m	struct:png_row_info_struct
bit_depth_	pngwriter.h	/^   int bit_depth_;$/;"	m	class:pngwriter
bits	zlib/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state
bits	zlib/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon1
bits_sent	zlib/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state
bl_count	zlib/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state
bl_desc	zlib/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
bl_order	zlib/trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
bl_tree	zlib/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
block_done	zlib/deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon4	file:
block_start	zlib/deflate.h	/^    long block_start;$/;"	m	struct:internal_state
block_state	zlib/deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon4	file:
blue	libpng/png.h	/^   png_byte blue;$/;"	m	struct:png_color_8_struct
blue	libpng/png.h	/^   png_byte blue;$/;"	m	struct:png_color_struct
blue	libpng/png.h	/^   png_uint_16 blue;$/;"	m	struct:png_color_16_struct
blue	libpng/png.h	/^   png_uint_16 blue;$/;"	m	struct:png_sPLT_entry_struct
boundary_fill	pngwriter.cpp	/^void pngwriter::boundary_fill(int xstart, int ystart, double boundary_red,double boundary_green,double boundary_blue,double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
boundary_fill	pngwriter.cpp	/^void pngwriter::boundary_fill(int xstart, int ystart, int boundary_red,int boundary_green,int boundary_blue,int fill_red, int fill_green, int fill_blue)$/;"	f	class:pngwriter
boundary_fill_blend	pngwriter.cpp	/^void pngwriter::boundary_fill_blend(int xstart, int ystart, double opacity, double boundary_red,double boundary_green,double boundary_blue,double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
boundary_fill_blend	pngwriter.cpp	/^void pngwriter::boundary_fill_blend(int xstart, int ystart, double opacity, int boundary_red,int boundary_green,int boundary_blue,int fill_red, int fill_green, int fill_blue)$/;"	f	class:pngwriter
build_bl_tree	zlib/trees.c	/^local int build_bl_tree(s)$/;"	f
build_tree	zlib/trees.c	/^local void build_tree(s, desc)$/;"	f
channels	libpng/png.h	/^   png_byte channels; \/* number of channels (1, 2, 3, or 4) *\/$/;"	m	struct:png_row_info_struct
charf	zlib/zconf.h	/^typedef char  FAR charf;$/;"	t
charf	zlib/zconf.h	112;"	d
check	zlib/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state
check_if_png	pngwriter.cpp	/^int pngwriter::check_if_png(char *file_name, FILE **fp)$/;"	f	class:pngwriter
check_match	zlib/deflate.c	/^local void check_match(s, start, match, length)$/;"	f
check_match	zlib/deflate.c	1292;"	d	file:
circle	pngwriter.cpp	/^void pngwriter::circle(int xcentre, int ycentre, int radius, double red, double green, double blue)$/;"	f	class:pngwriter
circle	pngwriter.cpp	/^void pngwriter::circle(int xcentre, int ycentre, int radius, int red, int green, int blue)$/;"	f	class:pngwriter
circle_aux	pngwriter.cpp	/^void pngwriter::circle_aux(int xcentre, int ycentre, int x, int y, int red, int green, int blue)$/;"	f	class:pngwriter
circle_aux_blend	pngwriter.cpp	/^void pngwriter::circle_aux_blend(int xcentre, int ycentre, int x, int y, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
circle_blend	pngwriter.cpp	/^void pngwriter::circle_blend(int xcentre, int ycentre, int radius, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
circle_blend	pngwriter.cpp	/^void pngwriter::circle_blend(int xcentre, int ycentre, int radius, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
clear	pngwriter.cpp	/^void pngwriter::clear()$/;"	f	class:pngwriter
close	pngwriter.cpp	/^void pngwriter::close()$/;"	f	class:pngwriter
code	zlib/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon5
code	zlib/inftrees.h	/^} code;$/;"	t	typeref:struct:__anon1
codes	zlib/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state
codetype	zlib/inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon2
color_type	libpng/png.h	/^   png_byte color_type; \/* color type of row *\/$/;"	m	struct:png_row_info_struct
colortype_	pngwriter.h	/^   int colortype_;$/;"	m	class:pngwriter
comm_max	zlib/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s
comment	zlib/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s
compress	zlib/compress.c	/^int ZEXPORT compress (dest, destLen, source, sourceLen)$/;"	f
compress	zlib/zconf.h	30;"	d
compress2	zlib/compress.c	/^int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)$/;"	f
compress2	zlib/zconf.h	31;"	d
compressBound	zlib/compress.c	/^uLong ZEXPORT compressBound (sourceLen)$/;"	f
compressBound	zlib/zconf.h	32;"	d
compress_block	zlib/trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
compress_func	zlib/deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
compressed_len	zlib/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state
compression	libpng/png.h	/^   int  compression;       \/* compression value:$/;"	m	struct:png_text_struct
compression_state	libpng/pngwutil.c	/^} compression_state;$/;"	t	typeref:struct:__anon8	file:
compressionlevel_	pngwriter.h	/^   int compressionlevel_;$/;"	m	class:pngwriter
config	zlib/deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config_s	zlib/deflate.c	/^typedef struct config_s {$/;"	s	file:
configuration_table	zlib/deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	zlib/deflate.c	/^local const config configuration_table[2] = {$/;"	v
const	zlib/zconf.h	196;"	d
copy_block	zlib/trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
crc32	zlib/crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32	zlib/zconf.h	33;"	d
crc32_big	zlib/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	zlib/crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine	zlib/zconf.h	34;"	d
crc32_combine	zlib/zlib.h	1574;"	d
crc32_combine64	zlib/crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine64	zlib/zconf.h	35;"	d
crc32_combine_	zlib/crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	zlib/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_table	zlib/crc32.c	/^local unsigned long FAR crc_table[TBLS][256];$/;"	v
crc_table	zlib/crc32.h	/^local const unsigned long FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	zlib/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
cross	pngwriter.cpp	/^void pngwriter::cross( int x, int y, int xwidth, int yheight, double red, double green, double blue)$/;"	f	class:pngwriter
cross	pngwriter.cpp	/^void pngwriter::cross( int x, int y, int xwidth, int yheight, int red, int green, int blue)$/;"	f	class:pngwriter
ct_data	zlib/deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	zlib/deflate.h	/^typedef struct ct_data_s {$/;"	s
d_buf	zlib/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state
d_code	zlib/deflate.h	301;"	d
d_desc	zlib/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
dad	zlib/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon6
data	libpng/png.h	/^    png_byte *data;$/;"	m	struct:png_unknown_chunk_t
data_type	zlib/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s
day	libpng/png.h	/^   png_byte day;     \/* day of month, 1 - 31 *\/$/;"	m	struct:png_time_struct
deflate	zlib/deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflate	zlib/zconf.h	36;"	d
deflateBound	zlib/deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateBound	zlib/zconf.h	37;"	d
deflateCopy	zlib/deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateCopy	zlib/zconf.h	38;"	d
deflateEnd	zlib/deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateEnd	zlib/zconf.h	39;"	d
deflateInit	zlib/zlib.h	1546;"	d
deflateInit2	zlib/zlib.h	1550;"	d
deflateInit2_	zlib/deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit2_	zlib/zconf.h	40;"	d
deflateInit_	zlib/deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateInit_	zlib/zconf.h	41;"	d
deflateParams	zlib/deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflateParams	zlib/zconf.h	42;"	d
deflatePrime	zlib/deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflatePrime	zlib/zconf.h	43;"	d
deflateReset	zlib/deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateReset	zlib/zconf.h	44;"	d
deflateSetDictionary	zlib/deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetDictionary	zlib/zconf.h	45;"	d
deflateSetHeader	zlib/deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateSetHeader	zlib/zconf.h	46;"	d
deflateTune	zlib/deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflateTune	zlib/zconf.h	47;"	d
deflate_copyright	zlib/deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_copyright	zlib/zconf.h	48;"	d
deflate_fast	zlib/deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	zlib/deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	zlib/deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	zlib/deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_state	zlib/deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
deflate_stored	zlib/deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
depth	libpng/png.h	/^   png_byte depth;           \/* depth of palette samples *\/$/;"	m	struct:png_sPLT_struct
depth	zlib/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state
detect_data_type	zlib/trees.c	/^local int detect_data_type(s)$/;"	f
diamond	pngwriter.cpp	/^void pngwriter::diamond( int x, int y, int width, int height, double red, double green, double blue)$/;"	f	class:pngwriter
diamond	pngwriter.cpp	/^void pngwriter::diamond( int x, int y, int width, int height, int red, int green, int blue)$/;"	f	class:pngwriter
direct	zlib/gzguts.h	/^    int direct;             \/* true if last read direct, false if gzip *\/$/;"	m	struct:__anon7
distbits	zlib/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state
distcode	zlib/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state
distfix	zlib/inffixed.h	/^    static const code distfix[32] = {$/;"	v
dl	zlib/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon6
dmax	zlib/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state
done	zlib/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s
drawbottom	pngwriter.cpp	/^void pngwriter::drawbottom(long x1,long y1,long x2,long x3,long y3, int red, int green, int blue)$/;"	f	class:pngwriter
drawbottom_blend	pngwriter.cpp	/^void pngwriter::drawbottom_blend(long x1,long y1,long x2,long x3,long y3, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
drawtop	pngwriter.cpp	/^void pngwriter::drawtop(long x1,long y1,long x2,long y2,long x3, int red, int green, int blue)$/;"	f	class:pngwriter
drawtop_blend	pngwriter.cpp	/^void pngwriter::drawtop_blend(long x1,long y1,long x2,long y2,long x3, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
dread	pngwriter.cpp	/^double  pngwriter::dread(int x, int y)$/;"	f	class:pngwriter
dread	pngwriter.cpp	/^double  pngwriter::dread(int x, int y, int colour)$/;"	f	class:pngwriter
dreadCMYK	pngwriter.cpp	/^double pngwriter::dreadCMYK(int x, int y, int colour)$/;"	f	class:pngwriter
dreadHSV	pngwriter.cpp	/^double pngwriter::dreadHSV(int x, int y, int colour)$/;"	f	class:pngwriter
dummy	zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:
dummy	zlib/zlib.h	/^    struct internal_state {int dummy;}; \/* hack for buggy compilers *\/$/;"	m	struct:internal_state
dummy	zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:
dyn_dtree	zlib/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_ltree	zlib/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_tree	zlib/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s
elems	zlib/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:
entries	libpng/png.h	/^   png_sPLT_entryp entries;  \/* palette entries *\/$/;"	m	struct:png_sPLT_struct
eof	zlib/gzguts.h	/^    int eof;                \/* true if end of input file reached *\/$/;"	m	struct:__anon7
err	zlib/gzguts.h	/^    int err;                \/* error code *\/$/;"	m	struct:__anon7
errno	zlib/zutil.c	/^    int errno = 0;$/;"	v
extra	zlib/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state
extra	zlib/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s
extra_base	zlib/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:
extra_bits	zlib/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
extra_blbits	zlib/trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	zlib/trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	zlib/trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
extra_len	zlib/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s
extra_max	zlib/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s
fc	zlib/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon5
fd	zlib/gzguts.h	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon7
fdopen	zlib/zutil.h	129;"	d
fdopen	zlib/zutil.h	149;"	d
fdopen	zlib/zutil.h	154;"	d
fdopen	zlib/zutil.h	160;"	d
filegamma_	pngwriter.h	/^   double filegamma_;$/;"	m	class:pngwriter
filename_	pngwriter.h	/^   char * filename_;   $/;"	m	class:pngwriter
fill_window	zlib/deflate.c	/^local void fill_window(s)$/;"	f
filledarrow	pngwriter.cpp	/^void pngwriter::filledarrow( int x1,int y1,int x2,int y2,int size, double head_angle, double red, double green, double blue)$/;"	f	class:pngwriter
filledarrow	pngwriter.cpp	/^void pngwriter::filledarrow( int x1,int y1,int x2,int y2,int size, double head_angle, int red, int green, int blue)$/;"	f	class:pngwriter
filledcircle	pngwriter.cpp	/^void pngwriter::filledcircle(int xcentre, int ycentre, int radius, double red, double green, double blue)$/;"	f	class:pngwriter
filledcircle	pngwriter.cpp	/^void pngwriter::filledcircle(int xcentre, int ycentre, int radius, int red, int green, int blue)$/;"	f	class:pngwriter
filledcircle_blend	pngwriter.cpp	/^void pngwriter::filledcircle_blend(int xcentre, int ycentre, int radius, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
filledcircle_blend	pngwriter.cpp	/^void pngwriter::filledcircle_blend(int xcentre, int ycentre, int radius, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
filleddiamond	pngwriter.cpp	/^void pngwriter::filleddiamond( int x, int y, int width, int height, double red, double green, double blue)$/;"	f	class:pngwriter
filleddiamond	pngwriter.cpp	/^void pngwriter::filleddiamond( int x, int y, int width, int height, int red, int green, int blue)$/;"	f	class:pngwriter
filledsquare	pngwriter.cpp	/^void pngwriter::filledsquare(int xfrom, int yfrom, int xto, int yto, double red, double green, double blue)$/;"	f	class:pngwriter
filledsquare	pngwriter.cpp	/^void pngwriter::filledsquare(int xfrom, int yfrom, int xto, int yto, int red, int green, int blue)$/;"	f	class:pngwriter
filledsquare_blend	pngwriter.cpp	/^void pngwriter::filledsquare_blend(int xfrom, int yfrom, int xto, int yto, double opacity, double red, double green,double  blue)$/;"	f	class:pngwriter
filledsquare_blend	pngwriter.cpp	/^void pngwriter::filledsquare_blend(int xfrom, int yfrom, int xto, int yto, double opacity, int red, int green,int  blue)$/;"	f	class:pngwriter
filledtriangle	pngwriter.cpp	/^void pngwriter::filledtriangle(int x1,int y1,int x2,int y2,int x3,int y3, double red, double green, double blue)$/;"	f	class:pngwriter
filledtriangle	pngwriter.cpp	/^void pngwriter::filledtriangle(int x1,int y1,int x2,int y2,int x3,int y3, int red, int green, int blue)$/;"	f	class:pngwriter
filledtriangle_blend	pngwriter.cpp	/^void pngwriter::filledtriangle_blend(int x1,int y1,int x2,int y2,int x3,int y3, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
filledtriangle_blend	pngwriter.cpp	/^void pngwriter::filledtriangle_blend(int x1,int y1,int x2,int y2,int x3,int y3, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
finish_done	zlib/deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon4	file:
finish_started	zlib/deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon4	file:
fixedtables	zlib/infback.c	/^local void fixedtables(state)$/;"	f
fixedtables	zlib/inflate.c	/^local void fixedtables(state)$/;"	f
flags	zlib/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state
flood_fill	pngwriter.cpp	/^void pngwriter::flood_fill(int xstart, int ystart, double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
flood_fill	pngwriter.cpp	/^void pngwriter::flood_fill(int xstart, int ystart, int fill_red, int fill_green, int fill_blue)$/;"	f	class:pngwriter
flood_fill_blend	pngwriter.cpp	/^void pngwriter::flood_fill_blend(int xstart, int ystart, double opacity, double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
flood_fill_blend	pngwriter.cpp	/^void pngwriter::flood_fill_blend(int xstart, int ystart, double opacity, int fill_red, int fill_green, int fill_blue)$/;"	f	class:pngwriter
flood_fill_internal	pngwriter.cpp	/^void pngwriter::flood_fill_internal(int xstart, int ystart,  double start_red, double start_green, double start_blue, double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
flood_fill_internal_blend	pngwriter.cpp	/^void pngwriter::flood_fill_internal_blend(int xstart, int ystart, double opacity,  double start_red, double start_green, double start_blue, double fill_red, double fill_green, double fill_blue)$/;"	f	class:pngwriter
flush_pending	zlib/deflate.c	/^local void flush_pending(strm)$/;"	f
fourbppswaptable	libpng/pngtrans.c	/^static PNG_CONST png_byte fourbppswaptable[256] = {$/;"	v	file:
free_func	zlib/zconf.h	113;"	d
free_func	zlib/zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
freq	zlib/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon5
frequency	libpng/png.h	/^   png_uint_16 frequency;$/;"	m	struct:png_sPLT_entry_struct
func	zlib/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:
gen_bitlen	zlib/trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	zlib/trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_trees_header	zlib/trees.c	/^void gen_trees_header()$/;"	f
get_crc_table	zlib/crc32.c	/^const unsigned long FAR * ZEXPORT get_crc_table()$/;"	f
get_crc_table	zlib/zconf.h	49;"	d
get_text_width	pngwriter.cpp	/^int pngwriter::get_text_width(char * face_path, int fontsize, char * text)$/;"	f	class:pngwriter
get_text_width_utf8	pngwriter.cpp	/^int pngwriter::get_text_width_utf8(char * face_path, int fontsize,  char * text)$/;"	f	class:pngwriter
getbitdepth	pngwriter.cpp	/^int pngwriter::getbitdepth(void)$/;"	f	class:pngwriter
getcolortype	pngwriter.cpp	/^int pngwriter::getcolortype(void)$/;"	f	class:pngwriter
getgamma	pngwriter.cpp	/^double pngwriter::getgamma(void)$/;"	f	class:pngwriter
getheight	pngwriter.cpp	/^int pngwriter::getheight(void)$/;"	f	class:pngwriter
getwidth	pngwriter.cpp	/^int pngwriter::getwidth(void)$/;"	f	class:pngwriter
gf2_matrix_square	zlib/crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	zlib/crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
good_length	zlib/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:
good_match	zlib/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state
graph_	pngwriter.h	/^   unsigned char * * graph_;$/;"	m	class:pngwriter
gray	libpng/png.h	/^   png_byte gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_8_struct
gray	libpng/png.h	/^   png_uint_16 gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_16_struct
green	libpng/png.h	/^   png_byte green;$/;"	m	struct:png_color_8_struct
green	libpng/png.h	/^   png_byte green;$/;"	m	struct:png_color_struct
green	libpng/png.h	/^   png_uint_16 green;$/;"	m	struct:png_color_16_struct
green	libpng/png.h	/^   png_uint_16 green;$/;"	m	struct:png_sPLT_entry_struct
gzFile	zlib/zconf.h	114;"	d
gzFile	zlib/zlib.h	/^typedef voidp gzFile;       \/* opaque gzip file descriptor *\/$/;"	t
gz_avail	zlib/gzread.c	/^local int gz_avail(state)$/;"	f
gz_comp	zlib/gzwrite.c	/^local int gz_comp(state, flush)$/;"	f
gz_decomp	zlib/gzread.c	/^local int gz_decomp(state)$/;"	f
gz_error	zlib/gzlib.c	/^void ZEXPORT gz_error(state, err, msg)$/;"	f
gz_error	zlib/zconf.h	50;"	d
gz_head	zlib/gzread.c	/^local int gz_head(state)$/;"	f
gz_header	zlib/zconf.h	115;"	d
gz_header	zlib/zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	zlib/zconf.h	129;"	d
gz_header_s	zlib/zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_headerp	zlib/zconf.h	116;"	d
gz_headerp	zlib/zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gz_init	zlib/gzwrite.c	/^local int gz_init(state)$/;"	f
gz_intmax	zlib/gzlib.c	/^unsigned ZEXPORT gz_intmax()$/;"	f
gz_intmax	zlib/zconf.h	51;"	d
gz_load	zlib/gzread.c	/^local int gz_load(state, buf, len, have)$/;"	f
gz_make	zlib/gzread.c	/^local int gz_make(state)$/;"	f
gz_next4	zlib/gzread.c	/^local int gz_next4(state, ret)$/;"	f
gz_open	zlib/gzlib.c	/^local gzFile gz_open(path, fd, mode)$/;"	f
gz_reset	zlib/gzlib.c	/^local void gz_reset(state)$/;"	f
gz_skip	zlib/gzread.c	/^local int gz_skip(state, len)$/;"	f
gz_state	zlib/gzguts.h	/^} gz_state;$/;"	t	typeref:struct:__anon7
gz_statep	zlib/gzguts.h	/^typedef gz_state FAR *gz_statep;$/;"	t
gz_strwinerror	zlib/gzlib.c	/^char ZEXPORT *gz_strwinerror (error)$/;"	f
gz_strwinerror	zlib/zconf.h	52;"	d
gz_zero	zlib/gzwrite.c	/^local int gz_zero(state, len)$/;"	f
gzbuffer	zlib/gzlib.c	/^int ZEXPORT gzbuffer(file, size)$/;"	f
gzbuffer	zlib/zconf.h	53;"	d
gzclearerr	zlib/gzlib.c	/^void ZEXPORT gzclearerr(file)$/;"	f
gzclearerr	zlib/zconf.h	54;"	d
gzclose	zlib/gzclose.c	/^int ZEXPORT gzclose(file)$/;"	f
gzclose	zlib/zconf.h	55;"	d
gzclose_r	zlib/gzread.c	/^int ZEXPORT gzclose_r(file)$/;"	f
gzclose_r	zlib/zconf.h	56;"	d
gzclose_w	zlib/gzwrite.c	/^int ZEXPORT gzclose_w(file)$/;"	f
gzclose_w	zlib/zconf.h	57;"	d
gzdirect	zlib/gzread.c	/^int ZEXPORT gzdirect(file)$/;"	f
gzdirect	zlib/zconf.h	58;"	d
gzdopen	zlib/gzlib.c	/^gzFile ZEXPORT gzdopen(fd, mode)$/;"	f
gzdopen	zlib/zconf.h	59;"	d
gzeof	zlib/gzlib.c	/^int ZEXPORT gzeof(file)$/;"	f
gzeof	zlib/zconf.h	60;"	d
gzerror	zlib/gzlib.c	/^const char * ZEXPORT gzerror(file, errnum)$/;"	f
gzerror	zlib/zconf.h	61;"	d
gzflush	zlib/gzwrite.c	/^int ZEXPORT gzflush(file, flush)$/;"	f
gzflush	zlib/zconf.h	62;"	d
gzgetc	zlib/gzread.c	/^int ZEXPORT gzgetc(file)$/;"	f
gzgetc	zlib/zconf.h	63;"	d
gzgets	zlib/gzread.c	/^char * ZEXPORT gzgets(file, buf, len)$/;"	f
gzgets	zlib/zconf.h	64;"	d
gzhead	zlib/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state
gzindex	zlib/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state
gzoffset	zlib/gzlib.c	/^z_off_t ZEXPORT gzoffset(file)$/;"	f
gzoffset	zlib/zconf.h	65;"	d
gzoffset	zlib/zlib.h	1572;"	d
gzoffset64	zlib/gzlib.c	/^z_off64_t ZEXPORT gzoffset64(file)$/;"	f
gzoffset64	zlib/zconf.h	66;"	d
gzopen	zlib/gzlib.c	/^gzFile ZEXPORT gzopen(path, mode)$/;"	f
gzopen	zlib/zconf.h	67;"	d
gzopen	zlib/zlib.h	1569;"	d
gzopen64	zlib/gzlib.c	/^gzFile ZEXPORT gzopen64(path, mode)$/;"	f
gzopen64	zlib/zconf.h	68;"	d
gzprintf	zlib/gzwrite.c	/^int ZEXPORTVA gzprintf (file, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,$/;"	f
gzprintf	zlib/gzwrite.c	/^int ZEXPORTVA gzprintf (gzFile file, const char *format, ...)$/;"	f
gzprintf	zlib/zconf.h	69;"	d
gzputc	zlib/gzwrite.c	/^int ZEXPORT gzputc(file, c)$/;"	f
gzputc	zlib/zconf.h	70;"	d
gzputs	zlib/gzwrite.c	/^int ZEXPORT gzputs(file, str)$/;"	f
gzputs	zlib/zconf.h	71;"	d
gzread	zlib/gzread.c	/^int ZEXPORT gzread(file, buf, len)$/;"	f
gzread	zlib/zconf.h	72;"	d
gzrewind	zlib/gzlib.c	/^int ZEXPORT gzrewind(file)$/;"	f
gzrewind	zlib/zconf.h	73;"	d
gzseek	zlib/gzlib.c	/^z_off_t ZEXPORT gzseek(file, offset, whence)$/;"	f
gzseek	zlib/zconf.h	74;"	d
gzseek	zlib/zlib.h	1570;"	d
gzseek64	zlib/gzlib.c	/^z_off64_t ZEXPORT gzseek64(file, offset, whence)$/;"	f
gzseek64	zlib/zconf.h	75;"	d
gzsetparams	zlib/gzwrite.c	/^int ZEXPORT gzsetparams(file, level, strategy)$/;"	f
gzsetparams	zlib/zconf.h	76;"	d
gztell	zlib/gzlib.c	/^z_off_t ZEXPORT gztell(file)$/;"	f
gztell	zlib/zconf.h	77;"	d
gztell	zlib/zlib.h	1571;"	d
gztell64	zlib/gzlib.c	/^z_off64_t ZEXPORT gztell64(file)$/;"	f
gztell64	zlib/zconf.h	78;"	d
gzungetc	zlib/gzread.c	/^int ZEXPORT gzungetc(c, file)$/;"	f
gzungetc	zlib/zconf.h	79;"	d
gzwrite	zlib/gzwrite.c	/^int ZEXPORT gzwrite(file, buf, len)$/;"	f
gzwrite	zlib/zconf.h	80;"	d
hash_bits	zlib/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state
hash_mask	zlib/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state
hash_shift	zlib/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state
hash_size	zlib/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state
have	zlib/gzguts.h	/^    unsigned have;          \/* amount of output data unused at next *\/$/;"	m	struct:__anon7
have	zlib/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state
havedict	zlib/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state
hcrc	zlib/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s
head	zlib/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state
head	zlib/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state
heap	zlib/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state
heap_len	zlib/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state
heap_max	zlib/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state
height_	pngwriter.h	/^   int height_;$/;"	m	class:pngwriter
high_water	zlib/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state
hold	zlib/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state
hour	libpng/png.h	/^   png_byte hour;    \/* hour of day, 0 - 23 *\/$/;"	m	struct:png_time_struct
how	zlib/gzguts.h	/^    int how;                \/* 0: get header, 1: copy, 2: decompress *\/$/;"	m	struct:__anon7
in	zlib/gzguts.h	/^    unsigned char *in;      \/* input buffer *\/$/;"	m	struct:__anon7
in_func	zlib/zconf.h	117;"	d
in_func	zlib/zlib.h	/^typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));$/;"	t
index	libpng/png.h	/^   png_byte index;    \/* used for palette files *\/$/;"	m	struct:png_color_16_struct
inflate	zlib/inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflate	zlib/zconf.h	81;"	d
inflateBack	zlib/infback.c	/^int ZEXPORT inflateBack(strm, in, in_desc, out, out_desc)$/;"	f
inflateBack	zlib/zconf.h	82;"	d
inflateBackEnd	zlib/infback.c	/^int ZEXPORT inflateBackEnd(strm)$/;"	f
inflateBackEnd	zlib/zconf.h	83;"	d
inflateBackInit	zlib/zlib.h	1555;"	d
inflateBackInit_	zlib/infback.c	/^int ZEXPORT inflateBackInit_(strm, windowBits, window, version, stream_size)$/;"	f
inflateBackInit_	zlib/zconf.h	84;"	d
inflateCopy	zlib/inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateCopy	zlib/zconf.h	85;"	d
inflateEnd	zlib/inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateEnd	zlib/zconf.h	86;"	d
inflateGetHeader	zlib/inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateGetHeader	zlib/zconf.h	87;"	d
inflateInit	zlib/zlib.h	1548;"	d
inflateInit2	zlib/zlib.h	1553;"	d
inflateInit2_	zlib/inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit2_	zlib/zconf.h	88;"	d
inflateInit_	zlib/inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateInit_	zlib/zconf.h	89;"	d
inflateMark	zlib/inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflateMark	zlib/zconf.h	90;"	d
inflatePrime	zlib/inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflatePrime	zlib/zconf.h	91;"	d
inflateReset	zlib/inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset	zlib/zconf.h	92;"	d
inflateReset2	zlib/inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateReset2	zlib/zconf.h	93;"	d
inflateSetDictionary	zlib/inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSetDictionary	zlib/zconf.h	94;"	d
inflateSync	zlib/inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSync	zlib/zconf.h	95;"	d
inflateSyncPoint	zlib/inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateSyncPoint	zlib/zconf.h	96;"	d
inflateUndermine	zlib/inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
inflateUndermine	zlib/zconf.h	97;"	d
inflate_copyright	zlib/inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_copyright	zlib/zconf.h	98;"	d
inflate_fast	zlib/inffast.c	/^void inflate_fast(strm, start)$/;"	f
inflate_fast	zlib/zconf.h	99;"	d
inflate_mode	zlib/inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon3
inflate_state	zlib/inflate.h	/^struct inflate_state {$/;"	s
inflate_table	zlib/inftrees.c	/^int inflate_table(type, lens, codes, table, bits, work)$/;"	f
inflate_table	zlib/zconf.h	100;"	d
init_block	zlib/trees.c	/^local void init_block(s)$/;"	f
input	libpng/pngwutil.c	/^   char *input;   \/* The uncompressed input data *\/$/;"	m	struct:__anon8	file:
input_len	libpng/pngwutil.c	/^   int input_len;   \/* Its length *\/$/;"	m	struct:__anon8	file:
ins_h	zlib/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state
int_p_NULL	libpng/png.h	593;"	d
int_p_NULL	libpng/png.h	609;"	d
internal_state	zlib/deflate.h	/^typedef struct internal_state {$/;"	s
internal_state	zlib/zconf.h	130;"	d
internal_state	zlib/zlib.h	/^    struct internal_state {int dummy;}; \/* hack for buggy compilers *\/$/;"	s
internal_state	zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
intf	zlib/zconf.h	/^typedef int   FAR intf;$/;"	t
intf	zlib/zconf.h	118;"	d
invert	pngwriter.cpp	/^void pngwriter::invert(void)$/;"	f	class:pngwriter
isnonalpha	libpng/pngerror.c	153;"	d	file:
isnonalpha	libpng/pngrutil.c	2481;"	d	file:
itxt_length	libpng/png.h	/^   png_size_t itxt_length; \/* length of the itxt string *\/$/;"	m	struct:png_text_struct
jmpbuf	libpng/png.h	/^   jmp_buf jmpbuf;            \/* used in png_error *\/$/;"	m	struct:png_struct_def
key	libpng/png.h	/^   png_charp key;          \/* keyword, 1-79 character description of "text" *\/$/;"	m	struct:png_text_struct
l_buf	zlib/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state
l_desc	zlib/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
lang	libpng/png.h	/^   png_charp lang;         \/* language code, 0-79 characters$/;"	m	struct:png_text_struct
lang_key	libpng/png.h	/^   png_charp lang_key;     \/* keyword translated UTF-8 string, 0 or more$/;"	m	struct:png_text_struct
laplacian	pngwriter.cpp	/^void pngwriter::laplacian(double k, double offset)$/;"	f	class:pngwriter
last	zlib/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state
last_eob_len	zlib/deflate.h	/^    int last_eob_len;   \/* bit length of EOB code for last block *\/$/;"	m	struct:internal_state
last_flush	zlib/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state
last_lit	zlib/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state
left	libpng/pngrtran.c	/^   png_byte left;$/;"	m	struct:png_dsort_struct	file:
len	zlib/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon6
lenbits	zlib/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state
lencode	zlib/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state
lenfix	zlib/inffixed.h	/^    static const code lenfix[512] = {$/;"	v
length	zlib/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state
lens	zlib/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state
level	zlib/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state
level	zlib/gzguts.h	/^    int level;              \/* compression level *\/$/;"	m	struct:__anon7
line	pngwriter.cpp	/^void pngwriter::line(int xfrom, int yfrom, int xto, int yto, double red, double green,double  blue)$/;"	f	class:pngwriter
line	pngwriter.cpp	/^void pngwriter::line(int xfrom, int yfrom, int xto, int yto, int red, int green,int  blue)$/;"	f	class:pngwriter
line_blend	pngwriter.cpp	/^void pngwriter::line_blend(int xfrom, int yfrom, int xto, int yto,  double opacity, int red, int green,int  blue)$/;"	f	class:pngwriter
line_blend	pngwriter.cpp	/^void pngwriter::line_blend(int xfrom, int yfrom, int xto, int yto, double opacity, double red, double green,double  blue)$/;"	f	class:pngwriter
lit_bufsize	zlib/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state
lm_init	zlib/deflate.c	/^local void lm_init (s)$/;"	f
local	zlib/adler32.c	10;"	d	file:
local	zlib/crc32.c	31;"	d	file:
local	zlib/gzguts.h	36;"	d
local	zlib/zutil.h	41;"	d
location	libpng/png.h	/^    png_byte location; \/* mode of operation at read time *\/$/;"	m	struct:png_unknown_chunk_t
longest_match	zlib/deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
lookahead	zlib/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state
main	GenAlpha.cpp	/^int main()$/;"	f
make_crc_table	zlib/crc32.c	/^local void make_crc_table()$/;"	f
makefixed	zlib/inflate.c	/^void makefixed()$/;"	f
maltesecross	pngwriter.cpp	/^void pngwriter::maltesecross( int x, int y, int xwidth, int yheight, int x_bar_height, int y_bar_width, double red, double green, double blue)$/;"	f	class:pngwriter
maltesecross	pngwriter.cpp	/^void pngwriter::maltesecross( int x, int y, int xwidth, int yheight, int x_bar_height, int y_bar_width, int red, int green, int blue)$/;"	f	class:pngwriter
match_available	zlib/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state
match_length	zlib/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state
match_start	zlib/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state
matches	zlib/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state
max_chain	zlib/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:
max_chain_length	zlib/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state
max_code	zlib/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s
max_insert_length	zlib/deflate.h	176;"	d
max_lazy	zlib/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:
max_lazy_match	zlib/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state
max_length	zlib/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:
max_output_ptr	libpng/pngwutil.c	/^   int max_output_ptr; \/* Size of output_ptr *\/$/;"	m	struct:__anon8	file:
method	zlib/deflate.h	/^    Byte  method;        \/* STORED (for zip only) or DEFLATED *\/$/;"	m	struct:internal_state
minute	libpng/png.h	/^   png_byte minute;  \/* minute of hour, 0 - 59 *\/$/;"	m	struct:png_time_struct
mode	zlib/gzguts.h	/^    int mode;               \/* see gzip modes above *\/$/;"	m	struct:__anon7
mode	zlib/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state
month	libpng/png.h	/^   png_byte month;   \/* month of year, 1 - 12 *\/$/;"	m	struct:png_time_struct
msg	zlib/gzguts.h	/^    char *msg;              \/* error message *\/$/;"	m	struct:__anon7
msg	zlib/zlib.h	/^    char     *msg;      \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s
my_draw_bitmap	pngwriter.cpp	/^void pngwriter::my_draw_bitmap( FT_Bitmap * bitmap, int x, int y, double red, double green, double blue)$/;"	f	class:pngwriter
my_draw_bitmap_blend	pngwriter.cpp	/^void pngwriter::my_draw_bitmap_blend( FT_Bitmap * bitmap, int x, int y, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
name	libpng/png.h	/^    png_byte name[PNG_CHUNK_NAME_LENGTH];$/;"	m	struct:png_unknown_chunk_t
name	libpng/png.h	/^   png_charp name;           \/* palette name *\/$/;"	m	struct:png_sPLT_struct
name	zlib/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s
name_max	zlib/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s
ncode	zlib/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state
ndist	zlib/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state
need_more	zlib/deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon4	file:
nentries	libpng/png.h	/^   png_int_32 nentries;      \/* number of palette entries *\/$/;"	m	struct:png_sPLT_struct
new_ptr	zlib/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:
next	libpng/pngrtran.c	/^   struct png_dsort_struct FAR * next;$/;"	m	struct:png_dsort_struct	typeref:struct:png_dsort_struct::FAR	file:
next	zlib/gzguts.h	/^    unsigned char *next;    \/* next output data to deliver or write *\/$/;"	m	struct:__anon7
next	zlib/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state
next_in	zlib/zlib.h	/^    Bytef    *next_in;  \/* next input byte *\/$/;"	m	struct:z_stream_s
next_out	zlib/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s
next_ptr	zlib/zutil.c	/^local int next_ptr = 0;$/;"	v
nice_length	zlib/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:
nice_match	zlib/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state
nlen	zlib/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state
num_output_ptr	libpng/pngwutil.c	/^   int num_output_ptr; \/* Number of output pointers used *\/$/;"	m	struct:__anon8	file:
offset	zlib/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state
onebppswaptable	libpng/pngtrans.c	/^static PNG_CONST png_byte onebppswaptable[256] = {$/;"	v	file:
op	zlib/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon1
opaque	zlib/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s
operator =	pngwriter.cpp	/^pngwriter & pngwriter::operator = (const pngwriter & rhs)$/;"	f	class:pngwriter
opt_len	zlib/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state
org_ptr	zlib/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:
os	zlib/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s
out	zlib/gzguts.h	/^    unsigned char *out;     \/* output buffer (double-sized when reading) *\/$/;"	m	struct:__anon7
out_func	zlib/zconf.h	119;"	d
out_func	zlib/zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
output_ptr	libpng/pngwutil.c	/^   png_charpp output_ptr; \/* Array of pointers to output *\/$/;"	m	struct:__anon8	file:
path	zlib/gzguts.h	/^    char *path;             \/* path or fd for error messages *\/$/;"	m	struct:__anon7
pending	zlib/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state
pending_buf	zlib/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state
pending_buf_size	zlib/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state
pending_out	zlib/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state
pixel_depth	libpng/png.h	/^   png_byte pixel_depth; \/* bits per pixel (depth * channels) *\/$/;"	m	struct:png_row_info_struct
plot	pngwriter.cpp	/^void pngwriter::plot(int x, int y, double red, double green, double blue)$/;"	f	class:pngwriter
plot	pngwriter.cpp	/^void pngwriter::plot(int x, int y, int red, int green, int blue)$/;"	f	class:pngwriter
plotCMYK	pngwriter.cpp	/^void pngwriter::plotCMYK(int x, int y, double cyan, double magenta, double yellow, double black)$/;"	f	class:pngwriter
plotCMYK	pngwriter.cpp	/^void pngwriter::plotCMYK(int x, int y, int cyan, int magenta, int yellow, int black)$/;"	f	class:pngwriter
plotCMYK_blend	pngwriter.cpp	/^void pngwriter::plotCMYK_blend(int x, int y, double opacity, double cyan, double magenta, double yellow, double black)$/;"	f	class:pngwriter
plotCMYK_blend	pngwriter.cpp	/^void pngwriter::plotCMYK_blend(int x, int y, double opacity, int cyan, int magenta, int yellow, int black)$/;"	f	class:pngwriter
plotHSV	pngwriter.cpp	/^void pngwriter::plotHSV(int x, int y, double hue, double saturation, double value)$/;"	f	class:pngwriter
plotHSV	pngwriter.cpp	/^void pngwriter::plotHSV(int x, int y, int hue, int saturation, int value)$/;"	f	class:pngwriter
plotHSV_blend	pngwriter.cpp	/^void pngwriter::plotHSV_blend(int x, int y, double opacity, double hue, double saturation, double value)$/;"	f	class:pngwriter
plotHSV_blend	pngwriter.cpp	/^void pngwriter::plotHSV_blend(int x, int y, double opacity, int hue, int saturation, int value)$/;"	f	class:pngwriter
plot_blend	pngwriter.cpp	/^void pngwriter::plot_blend(int x, int y, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
plot_blend	pngwriter.cpp	/^void pngwriter::plot_blend(int x, int y, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
plot_text	pngwriter.cpp	/^void pngwriter::plot_text( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double red, double green, double blue)$/;"	f	class:pngwriter
plot_text	pngwriter.cpp	/^void pngwriter::plot_text( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, int red, int green, int blue)$/;"	f	class:pngwriter
plot_text_blend	pngwriter.cpp	/^void pngwriter::plot_text_blend( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double opacity,  double red, double green, double blue)$/;"	f	class:pngwriter
plot_text_blend	pngwriter.cpp	/^void pngwriter::plot_text_blend( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
plot_text_blend	pngwriter.cpp	/^void pngwriter::plot_text_blend( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
plot_text_utf8	pngwriter.cpp	/^void pngwriter::plot_text_utf8( char * face_path, int fontsize, int x_start, int y_start, double angle,  char * text, double red, double green, double blue)$/;"	f	class:pngwriter
plot_text_utf8	pngwriter.cpp	/^void pngwriter::plot_text_utf8( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double red, double green, double blue)$/;"	f	class:pngwriter
plot_text_utf8	pngwriter.cpp	/^void pngwriter::plot_text_utf8( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, int red, int green, int blue)$/;"	f	class:pngwriter
plot_text_utf8_blend	pngwriter.cpp	/^void pngwriter::plot_text_utf8_blend( char * face_path, int fontsize, int x_start, int y_start, double angle,  char * text, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
plot_text_utf8_blend	pngwriter.cpp	/^void pngwriter::plot_text_utf8_blend( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double opacity,  int red, int green, int blue)$/;"	f	class:pngwriter
plot_text_utf8_blend	pngwriter.cpp	/^void pngwriter::plot_text_utf8_blend( char * face_path, int fontsize, int x_start, int y_start, double angle, char * text, double opacity, double red, double green, double blue)$/;"	f	class:pngwriter
png_64bit_product	libpng/png.c	/^png_64bit_product (long v1, long v2, unsigned long *hi_product,$/;"	f
png_FILE_p	libpng/pngconf.h	/^typedef FILE                * png_FILE_p;$/;"	t
png_FILE_p	libpng/pngconf.h	/^typedef HANDLE                png_FILE_p;$/;"	t
png_access_version_number	libpng/png.c	/^png_access_version_number(void)$/;"	f
png_benign_error	libpng/pngconf.h	132;"	d
png_benign_error	libpng/pngconf.h	136;"	d
png_benign_error	libpng/pngerror.c	/^png_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_build_gamma_table	libpng/pngrtran.c	/^png_build_gamma_table(png_structp png_ptr)$/;"	f
png_build_grayscale_palette	libpng/pngrtran.c	/^png_build_grayscale_palette(int bit_depth, png_colorp palette)$/;"	f
png_byte	libpng/pngconf.h	/^typedef unsigned char png_byte;$/;"	t
png_bytep	libpng/pngconf.h	/^typedef png_byte        FAR * png_bytep;$/;"	t
png_bytep_NULL	libpng/png.h	594;"	d
png_bytep_NULL	libpng/png.h	610;"	d
png_bytepp	libpng/pngconf.h	/^typedef png_byte        FAR * FAR * png_bytepp;$/;"	t
png_bytepp_NULL	libpng/png.h	595;"	d
png_bytepp_NULL	libpng/png.h	611;"	d
png_calculate_crc	libpng/png.c	/^png_calculate_crc(png_structp png_ptr, png_bytep ptr, png_size_t length)$/;"	f
png_calloc	libpng/pngmem.c	/^png_calloc(png_structp png_ptr, png_uint_32 size)$/;"	f
png_charp	libpng/pngconf.h	/^typedef char            FAR * png_charp;$/;"	t
png_charpp	libpng/pngconf.h	/^typedef char            FAR * FAR * png_charpp;$/;"	t
png_charppp	libpng/pngconf.h	/^typedef char            FAR * FAR * FAR * png_charppp;$/;"	t
png_check_IHDR	libpng/png.c	/^png_check_IHDR(png_structp png_ptr,$/;"	f
png_check_cHRM_fixed	libpng/png.c	/^png_check_cHRM_fixed(png_structp png_ptr,$/;"	f
png_check_chunk_name	libpng/pngrutil.c	/^png_check_chunk_name(png_structp png_ptr, png_bytep chunk_name)$/;"	f
png_check_keyword	libpng/pngwutil.c	/^png_check_keyword(png_structp png_ptr, png_charp key, png_charpp new_key)$/;"	f
png_check_sig	libpng/png.c	/^png_check_sig(png_bytep sig, int num)$/;"	f
png_chunk_benign_error	libpng/pngconf.h	133;"	d
png_chunk_benign_error	libpng/pngconf.h	137;"	d
png_chunk_benign_error	libpng/pngerror.c	/^png_chunk_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_error	libpng/pngerror.c	/^png_chunk_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_warning	libpng/pngerror.c	/^png_chunk_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_color	libpng/png.h	/^} png_color;$/;"	t	typeref:struct:png_color_struct
png_color_16	libpng/png.h	/^} png_color_16;$/;"	t	typeref:struct:png_color_16_struct
png_color_16_struct	libpng/png.h	/^typedef struct png_color_16_struct$/;"	s
png_color_16p	libpng/png.h	/^typedef png_color_16 FAR * png_color_16p;$/;"	t
png_color_16pp	libpng/png.h	/^typedef png_color_16 FAR * FAR * png_color_16pp;$/;"	t
png_color_8	libpng/png.h	/^} png_color_8;$/;"	t	typeref:struct:png_color_8_struct
png_color_8_struct	libpng/png.h	/^typedef struct png_color_8_struct$/;"	s
png_color_8p	libpng/png.h	/^typedef png_color_8 FAR * png_color_8p;$/;"	t
png_color_8pp	libpng/png.h	/^typedef png_color_8 FAR * FAR * png_color_8pp;$/;"	t
png_color_struct	libpng/png.h	/^typedef struct png_color_struct$/;"	s
png_colorp	libpng/png.h	/^typedef png_color FAR * png_colorp;$/;"	t
png_colorpp	libpng/png.h	/^typedef png_color FAR * FAR * png_colorpp;$/;"	t
png_combine_row	libpng/pngrutil.c	/^png_combine_row(png_structp png_ptr, png_bytep row, int mask)$/;"	f
png_composite	libpng/png.h	2861;"	d
png_composite	libpng/png.h	2875;"	d
png_composite_16	libpng/png.h	2867;"	d
png_composite_16	libpng/png.h	2880;"	d
png_const_charp	libpng/pngconf.h	/^typedef PNG_CONST char  FAR * png_const_charp;$/;"	t
png_const_charpp	libpng/pngconf.h	/^typedef PNG_CONST char  FAR * FAR * png_const_charpp;$/;"	t
png_convert_from_struct_tm	libpng/pngwrite.c	/^png_convert_from_struct_tm(png_timep ptime, struct tm FAR * ttime)$/;"	f
png_convert_from_time_t	libpng/pngwrite.c	/^png_convert_from_time_t(png_timep ptime, time_t ttime)$/;"	f
png_convert_size	libpng/png.c	/^png_convert_size(size_t size)$/;"	f
png_convert_to_rfc1123	libpng/png.c	/^png_convert_to_rfc1123(png_structp png_ptr, png_timep ptime)$/;"	f
png_correct_palette	libpng/pngrtran.c	/^png_correct_palette(png_structp png_ptr, png_colorp palette,$/;"	f
png_crc_error	libpng/pngrutil.c	/^png_crc_error(png_structp png_ptr)$/;"	f
png_crc_finish	libpng/pngrutil.c	/^png_crc_finish(png_structp png_ptr, png_uint_32 skip)$/;"	f
png_crc_read	libpng/pngrutil.c	/^png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)$/;"	f
png_create_info_struct	libpng/png.c	/^png_create_info_struct(png_structp png_ptr)$/;"	f
png_create_read_struct	libpng/pngread.c	/^png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_create_read_struct_2	libpng/pngread.c	/^png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_create_struct	libpng/pngmem.c	/^png_create_struct(int type)$/;"	f
png_create_struct_2	libpng/pngmem.c	/^png_create_struct_2(int type, png_malloc_ptr malloc_fn, png_voidp mem_ptr)$/;"	f
png_create_write_struct	libpng/pngwrite.c	/^png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_create_write_struct_2	libpng/pngwrite.c	/^png_create_write_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_data_freer	libpng/png.c	/^png_data_freer(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_debug	libpng/png.h	2648;"	d
png_debug	libpng/png.h	2668;"	d
png_debug	libpng/png.h	2693;"	d
png_debug	libpng/png.h	2732;"	d
png_debug1	libpng/png.h	2651;"	d
png_debug1	libpng/png.h	2676;"	d
png_debug1	libpng/png.h	2704;"	d
png_debug1	libpng/png.h	2735;"	d
png_debug2	libpng/png.h	2654;"	d
png_debug2	libpng/png.h	2684;"	d
png_debug2	libpng/png.h	2715;"	d
png_debug2	libpng/png.h	2738;"	d
png_decompress_chunk	libpng/pngrutil.c	/^png_decompress_chunk(png_structp png_ptr, int comp_type,$/;"	f
png_default_error	libpng/pngerror.c	/^png_default_error(png_structp png_ptr, png_const_charp error_message)$/;"	f	file:
png_default_flush	libpng/pngwio.c	/^png_default_flush(png_structp png_ptr)$/;"	f
png_default_read_data	libpng/pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_default_read_data	libpng/pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f	file:
png_default_warning	libpng/pngerror.c	/^png_default_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f	file:
png_default_write_data	libpng/pngwio.c	/^png_default_write_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_destroy_info_struct	libpng/png.c	/^png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)$/;"	f
png_destroy_read_struct	libpng/pngread.c	/^png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,$/;"	f
png_destroy_struct	libpng/pngmem.c	/^png_destroy_struct(png_voidp struct_ptr)$/;"	f
png_destroy_struct_2	libpng/pngmem.c	/^png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,$/;"	f
png_destroy_write_struct	libpng/pngwrite.c	/^png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)$/;"	f
png_digit	libpng/pngerror.c	/^static PNG_CONST char png_digit[16] = {$/;"	v	file:
png_do_background	libpng/pngrtran.c	/^png_do_background(png_row_infop row_info, png_bytep row,$/;"	f
png_do_bgr	libpng/pngtrans.c	/^png_do_bgr(png_row_infop row_info, png_bytep row)$/;"	f
png_do_chop	libpng/pngrtran.c	/^png_do_chop(png_row_infop row_info, png_bytep row)$/;"	f
png_do_dither	libpng/pngrtran.c	/^png_do_dither(png_row_infop row_info, png_bytep row,$/;"	f
png_do_expand	libpng/pngrtran.c	/^png_do_expand(png_row_infop row_info, png_bytep row,$/;"	f
png_do_expand_palette	libpng/pngrtran.c	/^png_do_expand_palette(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gamma	libpng/pngrtran.c	/^png_do_gamma(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gray_to_rgb	libpng/pngrtran.c	/^png_do_gray_to_rgb(png_row_infop row_info, png_bytep row)$/;"	f
png_do_invert	libpng/pngtrans.c	/^png_do_invert(png_row_infop row_info, png_bytep row)$/;"	f
png_do_pack	libpng/pngwtran.c	/^png_do_pack(png_row_infop row_info, png_bytep row, png_uint_32 bit_depth)$/;"	f
png_do_packswap	libpng/pngtrans.c	/^png_do_packswap(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_filler	libpng/pngrtran.c	/^png_do_read_filler(png_row_infop row_info, png_bytep row,$/;"	f
png_do_read_interlace	libpng/pngrutil.c	/^png_do_read_interlace(png_structp png_ptr)$/;"	f
png_do_read_intrapixel	libpng/pngrtran.c	/^png_do_read_intrapixel(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_invert_alpha	libpng/pngrtran.c	/^png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_swap_alpha	libpng/pngrtran.c	/^png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_transformations	libpng/pngrtran.c	/^png_do_read_transformations(png_structp png_ptr)$/;"	f
png_do_rgb_to_gray	libpng/pngrtran.c	/^png_do_rgb_to_gray(png_structp png_ptr, png_row_infop row_info, png_bytep row)$/;"	f
png_do_shift	libpng/pngwtran.c	/^png_do_shift(png_row_infop row_info, png_bytep row, png_color_8p bit_depth)$/;"	f
png_do_strip_filler	libpng/pngtrans.c	/^png_do_strip_filler(png_row_infop row_info, png_bytep row, png_uint_32 flags)$/;"	f
png_do_swap	libpng/pngtrans.c	/^png_do_swap(png_row_infop row_info, png_bytep row)$/;"	f
png_do_unpack	libpng/pngrtran.c	/^png_do_unpack(png_row_infop row_info, png_bytep row)$/;"	f
png_do_unshift	libpng/pngrtran.c	/^png_do_unshift(png_row_infop row_info, png_bytep row, png_color_8p sig_bits)$/;"	f
png_do_write_interlace	libpng/pngwutil.c	/^png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)$/;"	f
png_do_write_intrapixel	libpng/pngwtran.c	/^png_do_write_intrapixel(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_invert_alpha	libpng/pngwtran.c	/^png_do_write_invert_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_swap_alpha	libpng/pngwtran.c	/^png_do_write_swap_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_transformations	libpng/pngwtran.c	/^png_do_write_transformations(png_structp png_ptr)$/;"	f
png_doublep	libpng/pngconf.h	/^typedef double          FAR * png_doublep;$/;"	t
png_doublep_NULL	libpng/png.h	596;"	d
png_doublep_NULL	libpng/png.h	612;"	d
png_doublepp	libpng/pngconf.h	/^typedef double          FAR * FAR * png_doublepp;$/;"	t
png_dsort	libpng/pngrtran.c	/^} png_dsort;$/;"	t	typeref:struct:png_dsort_struct	file:
png_dsort_struct	libpng/pngrtran.c	/^typedef struct png_dsort_struct$/;"	s	file:
png_dsortp	libpng/pngrtran.c	/^typedef png_dsort FAR *       png_dsortp;$/;"	t	file:
png_dsortpp	libpng/pngrtran.c	/^typedef png_dsort FAR * FAR * png_dsortpp;$/;"	t	file:
png_dummy_mmx_support	libpng/pnggccrd.c	/^int PNGAPI png_dummy_mmx_support(void)$/;"	f
png_err	libpng/pngerror.c	/^png_err(png_structp png_ptr)$/;"	f
png_error	libpng/pngerror.c	/^png_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_error_ptr	libpng/png.h	/^typedef void (PNGAPI *png_error_ptr) PNGARG((png_structp, png_const_charp));$/;"	t
png_error_ptr_NULL	libpng/png.h	597;"	d
png_error_ptr_NULL	libpng/png.h	613;"	d
png_far_to_near	libpng/pngwio.c	/^void *png_far_to_near(png_structp png_ptr, png_voidp ptr, int check)$/;"	f
png_fixed_point	libpng/pngconf.h	/^typedef png_int_32 png_fixed_point;$/;"	t
png_fixed_point_p	libpng/pngconf.h	/^typedef png_fixed_point FAR * png_fixed_point_p;$/;"	t
png_fixed_point_pp	libpng/pngconf.h	/^typedef png_fixed_point FAR * FAR * png_fixed_point_pp;$/;"	t
png_flush	libpng/pngwio.c	/^png_flush(png_structp png_ptr)$/;"	f
png_flush_ptr	libpng/png.h	/^typedef void (PNGAPI *png_flush_ptr) PNGARG((png_structp));$/;"	t
png_flush_ptr_NULL	libpng/png.h	598;"	d
png_flush_ptr_NULL	libpng/png.h	614;"	d
png_format_buffer	libpng/pngerror.c	/^png_format_buffer(png_structp png_ptr, png_charp buffer, png_const_charp$/;"	f	file:
png_free	libpng/pngmem.c	/^png_free(png_structp png_ptr, png_voidp ptr)$/;"	f
png_free_data	libpng/png.c	/^png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,$/;"	f
png_free_default	libpng/pngmem.c	/^png_free_default(png_structp png_ptr, png_voidp ptr)$/;"	f
png_free_ptr	libpng/png.h	/^typedef void (*png_free_ptr) PNGARG((png_structp, png_voidp));$/;"	t
png_free_ptr_NULL	libpng/png.h	599;"	d
png_free_ptr_NULL	libpng/png.h	615;"	d
png_gamma_shift	libpng/pngrtran.c	/^static PNG_CONST int png_gamma_shift[] =$/;"	v	file:
png_get_IHDR	libpng/pngget.c	/^png_get_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_PLTE	libpng/pngget.c	/^png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette,$/;"	f
png_get_asm_flagmask	libpng/pngget.c	/^png_get_asm_flagmask (int flag_select)$/;"	f
png_get_asm_flags	libpng/pngget.c	/^png_get_asm_flags (png_structp png_ptr)$/;"	f
png_get_bKGD	libpng/pngget.c	/^png_get_bKGD(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_bit_depth	libpng/pngget.c	/^png_get_bit_depth(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_cHRM	libpng/pngget.c	/^png_get_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_cHRM_fixed	libpng/pngget.c	/^png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_channels	libpng/pngget.c	/^png_get_channels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_color_type	libpng/pngget.c	/^png_get_color_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_compression_buffer_size	libpng/pngget.c	/^png_get_compression_buffer_size(png_structp png_ptr)$/;"	f
png_get_compression_type	libpng/pngget.c	/^png_get_compression_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_copyright	libpng/png.c	/^png_get_copyright(png_structp png_ptr)$/;"	f
png_get_error_ptr	libpng/pngerror.c	/^png_get_error_ptr(png_structp png_ptr)$/;"	f
png_get_filter_type	libpng/pngget.c	/^png_get_filter_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_gAMA	libpng/pngget.c	/^png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma)$/;"	f
png_get_gAMA_fixed	libpng/pngget.c	/^png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_hIST	libpng/pngget.c	/^png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist)$/;"	f
png_get_header_ver	libpng/png.c	/^png_get_header_ver(png_structp png_ptr)$/;"	f
png_get_header_version	libpng/png.c	/^png_get_header_version(png_structp png_ptr)$/;"	f
png_get_iCCP	libpng/pngget.c	/^png_get_iCCP(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_image_height	libpng/pngget.c	/^png_get_image_height(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_image_width	libpng/pngget.c	/^png_get_image_width(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_int_32	libpng/png.h	2898;"	d
png_get_int_32	libpng/pngrutil.c	/^png_get_int_32(png_bytep buf)$/;"	f
png_get_interlace_type	libpng/pngget.c	/^png_get_interlace_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_io_ptr	libpng/png.c	/^png_get_io_ptr(png_structp png_ptr)$/;"	f
png_get_libpng_ver	libpng/png.c	/^png_get_libpng_ver(png_structp png_ptr)$/;"	f
png_get_mem_ptr	libpng/pngmem.c	/^png_get_mem_ptr(png_structp png_ptr)$/;"	f
png_get_mmx_bitdepth_threshold	libpng/pngget.c	/^png_get_mmx_bitdepth_threshold (png_structp png_ptr)$/;"	f
png_get_mmx_flagmask	libpng/pngget.c	/^png_get_mmx_flagmask (int flag_select, int *compilerID)$/;"	f
png_get_mmx_rowbytes_threshold	libpng/pngget.c	/^png_get_mmx_rowbytes_threshold (png_structp png_ptr)$/;"	f
png_get_oFFs	libpng/pngget.c	/^png_get_oFFs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pCAL	libpng/pngget.c	/^png_get_pCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pHYs	libpng/pngget.c	/^png_get_pHYs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pHYs_dpi	libpng/pngget.c	/^png_get_pHYs_dpi(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pixel_aspect_ratio	libpng/pngget.c	/^png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_pixels_per_inch	libpng/pngget.c	/^png_get_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_pixels_per_meter	libpng/pngget.c	/^png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_progressive_ptr	libpng/pngpread.c	/^png_get_progressive_ptr(png_structp png_ptr)$/;"	f
png_get_rgb_to_gray_status	libpng/pngget.c	/^png_get_rgb_to_gray_status (png_structp png_ptr)$/;"	f
png_get_rowbytes	libpng/pngget.c	/^png_get_rowbytes(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_rows	libpng/pngget.c	/^png_get_rows(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_sBIT	libpng/pngget.c	/^png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit)$/;"	f
png_get_sCAL	libpng/pngget.c	/^png_get_sCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sCAL_s	libpng/pngget.c	/^png_get_sCAL_s(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sPLT	libpng/pngget.c	/^png_get_sPLT(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sRGB	libpng/pngget.c	/^png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *file_srgb_intent)$/;"	f
png_get_signature	libpng/pngget.c	/^png_get_signature(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_tIME	libpng/pngget.c	/^png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time)$/;"	f
png_get_tRNS	libpng/pngget.c	/^png_get_tRNS(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_text	libpng/pngget.c	/^png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr,$/;"	f
png_get_uint_16	libpng/png.h	2897;"	d
png_get_uint_16	libpng/pngrutil.c	/^png_get_uint_16(png_bytep buf)$/;"	f
png_get_uint_31	libpng/pngrutil.c	/^png_get_uint_31(png_structp png_ptr, png_bytep buf)$/;"	f
png_get_uint_32	libpng/png.h	2896;"	d
png_get_uint_32	libpng/pngrutil.c	/^png_get_uint_32(png_bytep buf)$/;"	f
png_get_unknown_chunks	libpng/pngget.c	/^png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_user_chunk_ptr	libpng/pngget.c	/^png_get_user_chunk_ptr(png_structp png_ptr)$/;"	f
png_get_user_height_max	libpng/pngget.c	/^png_get_user_height_max (png_structp png_ptr)$/;"	f
png_get_user_transform_ptr	libpng/pngtrans.c	/^png_get_user_transform_ptr(png_structp png_ptr)$/;"	f
png_get_user_width_max	libpng/pngget.c	/^png_get_user_width_max (png_structp png_ptr)$/;"	f
png_get_valid	libpng/pngget.c	/^png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag)$/;"	f
png_get_x_offset_inches	libpng/pngget.c	/^png_get_x_offset_inches(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_offset_microns	libpng/pngget.c	/^png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_offset_pixels	libpng/pngget.c	/^png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_pixels_per_inch	libpng/pngget.c	/^png_get_x_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_pixels_per_meter	libpng/pngget.c	/^png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_inches	libpng/pngget.c	/^png_get_y_offset_inches(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_microns	libpng/pngget.c	/^png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_pixels	libpng/pngget.c	/^png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_pixels_per_inch	libpng/pngget.c	/^png_get_y_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_pixels_per_meter	libpng/pngget.c	/^png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_handle_IEND	libpng/pngrutil.c	/^png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_IHDR	libpng/pngrutil.c	/^png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_PLTE	libpng/pngrutil.c	/^png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_as_unknown	libpng/png.c	/^png_handle_as_unknown(png_structp png_ptr, png_bytep chunk_name)$/;"	f
png_handle_bKGD	libpng/pngrutil.c	/^png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_cHRM	libpng/pngrutil.c	/^png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_gAMA	libpng/pngrutil.c	/^png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_hIST	libpng/pngrutil.c	/^png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iCCP	libpng/pngrutil.c	/^png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iTXt	libpng/pngrutil.c	/^png_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_oFFs	libpng/pngrutil.c	/^png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pCAL	libpng/pngrutil.c	/^png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pHYs	libpng/pngrutil.c	/^png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sBIT	libpng/pngrutil.c	/^png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sCAL	libpng/pngrutil.c	/^png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sPLT	libpng/pngrutil.c	/^png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sRGB	libpng/pngrutil.c	/^png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tEXt	libpng/pngrutil.c	/^png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tIME	libpng/pngrutil.c	/^png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tRNS	libpng/pngrutil.c	/^png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_unknown	libpng/pngrutil.c	/^png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_zTXt	libpng/pngrutil.c	/^png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_inflate	libpng/pngrutil.c	/^png_inflate(png_structp png_ptr, const png_byte *data, png_size_t size,$/;"	f	file:
png_info	libpng/png.h	/^} png_info;$/;"	t	typeref:struct:png_info_struct
png_info_destroy	libpng/png.c	/^png_info_destroy(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_info_init	libpng/png.c	/^png_info_init(png_infop info_ptr)$/;"	f
png_info_init	libpng/png.c	311;"	d	file:
png_info_init	libpng/png.h	1674;"	d
png_info_init	libpng/png.h	1675;"	d
png_info_init_3	libpng/png.c	/^png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)$/;"	f
png_info_struct	libpng/png.h	/^typedef struct png_info_struct$/;"	s
png_infop	libpng/png.h	/^typedef png_info FAR * png_infop;$/;"	t
png_infopp	libpng/png.h	/^typedef png_info FAR * FAR * png_infopp;$/;"	t
png_infopp_NULL	libpng/png.h	600;"	d
png_infopp_NULL	libpng/png.h	616;"	d
png_init_io	libpng/png.c	/^png_init_io(png_structp png_ptr, png_FILE_p fp)$/;"	f
png_init_read_transformations	libpng/pngrtran.c	/^png_init_read_transformations(png_structp png_ptr)$/;"	f
png_int_16	libpng/pngconf.h	/^typedef short png_int_16;$/;"	t
png_int_16p	libpng/pngconf.h	/^typedef png_int_16      FAR * png_int_16p;$/;"	t
png_int_16pp	libpng/pngconf.h	/^typedef png_int_16      FAR * FAR * png_int_16pp;$/;"	t
png_int_32	libpng/pngconf.h	/^typedef long png_int_32;$/;"	t
png_int_32p	libpng/pngconf.h	/^typedef png_int_32      FAR * png_int_32p;$/;"	t
png_int_32pp	libpng/pngconf.h	/^typedef png_int_32      FAR * FAR * png_int_32pp;$/;"	t
png_jmpbuf	libpng/pngconf.h	1617;"	d
png_jmpbuf	libpng/pngconf.h	1619;"	d
png_libpng_ver	libpng/png.c	/^PNG_CONST char png_libpng_ver[18] = PNG_LIBPNG_VER_STRING;$/;"	v
png_libpng_ver	libpng/png.h	635;"	d
png_malloc	libpng/pngmem.c	/^png_malloc(png_structp png_ptr, png_uint_32 size)$/;"	f
png_malloc_default	libpng/pngmem.c	/^png_malloc_default(png_structp png_ptr, png_uint_32 size)$/;"	f
png_malloc_ptr	libpng/png.h	/^typedef png_voidp (*png_malloc_ptr) PNGARG((png_structp, png_size_t));$/;"	t
png_malloc_ptr_NULL	libpng/png.h	601;"	d
png_malloc_ptr_NULL	libpng/png.h	617;"	d
png_malloc_warn	libpng/png.h	2171;"	d
png_malloc_warn	libpng/pngmem.c	/^png_malloc_warn(png_structp png_ptr, png_uint_32 size)$/;"	f
png_malloc_warn	libpng/pngmem.c	563;"	d	file:
png_memcmp	libpng/pngconf.h	1631;"	d
png_memcmp	libpng/pngconf.h	1660;"	d
png_memcpy	libpng/pngconf.h	1632;"	d
png_memcpy	libpng/pngconf.h	1661;"	d
png_memcpy_check	libpng/pngmem.c	/^png_memcpy_check (png_structp png_ptr, png_voidp s1, png_voidp s2,$/;"	f
png_memset	libpng/pngconf.h	1633;"	d
png_memset	libpng/pngconf.h	1662;"	d
png_memset_check	libpng/pngmem.c	/^png_memset_check (png_structp png_ptr, png_voidp s1, int value,$/;"	f
png_mmx_support	libpng/png.c	/^png_mmx_support(void)$/;"	f
png_pass_dsp_mask	libpng/png.c	/^PNG_CONST int FARDATA png_pass_dsp_mask[]$/;"	v
png_pass_inc	libpng/png.c	/^PNG_CONST int FARDATA png_pass_inc[] = {8, 8, 4, 4, 2, 2, 1};$/;"	v
png_pass_mask	libpng/png.c	/^PNG_CONST int FARDATA png_pass_mask[] =$/;"	v
png_pass_start	libpng/png.c	/^PNG_CONST int FARDATA png_pass_start[] = {0, 4, 0, 2, 0, 1, 0};$/;"	v
png_pass_yinc	libpng/png.c	/^PNG_CONST int FARDATA png_pass_yinc[] = {8, 8, 8, 4, 4, 2, 2};$/;"	v
png_pass_ystart	libpng/png.c	/^PNG_CONST int FARDATA png_pass_ystart[] = {0, 0, 4, 0, 2, 0, 1};$/;"	v
png_permit_empty_plte	libpng/pngset.c	/^png_permit_empty_plte (png_structp png_ptr, int empty_plte_permitted)$/;"	f
png_permit_mng_features	libpng/pngset.c	/^png_permit_mng_features (png_structp png_ptr, png_uint_32 mng_features)$/;"	f
png_process_IDAT_data	libpng/pngpread.c	/^png_process_IDAT_data(png_structp png_ptr, png_bytep buffer,$/;"	f
png_process_data	libpng/pngpread.c	/^png_process_data(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_process_some_data	libpng/pngpread.c	/^png_process_some_data(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_progressive_combine_row	libpng/pngpread.c	/^png_progressive_combine_row (png_structp png_ptr,$/;"	f
png_progressive_end_ptr	libpng/png.h	/^typedef void (PNGAPI *png_progressive_end_ptr) PNGARG((png_structp, png_infop));$/;"	t
png_progressive_info_ptr	libpng/png.h	/^typedef void (PNGAPI *png_progressive_info_ptr) PNGARG((png_structp, png_infop));$/;"	t
png_progressive_row_ptr	libpng/png.h	/^typedef void (PNGAPI *png_progressive_row_ptr) PNGARG((png_structp, png_bytep,$/;"	t
png_push_crc_finish	libpng/pngpread.c	/^png_push_crc_finish(png_structp png_ptr)$/;"	f
png_push_crc_skip	libpng/pngpread.c	/^png_push_crc_skip(png_structp png_ptr, png_uint_32 skip)$/;"	f
png_push_fill_buffer	libpng/pngpread.c	/^png_push_fill_buffer(png_structp png_ptr, png_bytep buffer, png_size_t length)$/;"	f
png_push_have_end	libpng/pngpread.c	/^png_push_have_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_have_info	libpng/pngpread.c	/^png_push_have_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_have_row	libpng/pngpread.c	/^png_push_have_row(png_structp png_ptr, png_bytep row)$/;"	f
png_push_process_row	libpng/pngpread.c	/^png_push_process_row(png_structp png_ptr)$/;"	f
png_push_read_IDAT	libpng/pngpread.c	/^png_push_read_IDAT(png_structp png_ptr)$/;"	f
png_push_read_chunk	libpng/pngpread.c	/^png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_read_sig	libpng/pngpread.c	/^png_push_read_sig(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_restore_buffer	libpng/pngpread.c	/^png_push_restore_buffer(png_structp png_ptr, png_bytep buffer,$/;"	f
png_push_save_buffer	libpng/pngpread.c	/^png_push_save_buffer(png_structp png_ptr)$/;"	f
png_read_chunk_header	libpng/pngrutil.c	/^png_read_chunk_header(png_structp png_ptr)$/;"	f
png_read_data	libpng/pngrio.c	/^png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_read_destroy	libpng/pngread.c	/^png_read_destroy(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_end	libpng/pngread.c	/^png_read_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_filter_row	libpng/pngrutil.c	/^png_read_filter_row(png_structp png_ptr, png_row_infop row_info, png_bytep row,$/;"	f
png_read_finish_row	libpng/pngrutil.c	/^png_read_finish_row(png_structp png_ptr)$/;"	f
png_read_image	libpng/pngread.c	/^png_read_image(png_structp png_ptr, png_bytepp image)$/;"	f
png_read_info	libpng/pngread.c	/^png_read_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_init	libpng/png.h	3128;"	d
png_read_init	libpng/png.h	3129;"	d
png_read_init	libpng/pngread.c	/^png_read_init(png_structp png_ptr)$/;"	f
png_read_init	libpng/pngread.c	202;"	d	file:
png_read_init_2	libpng/pngread.c	/^png_read_init_2(png_structp png_ptr, png_const_charp user_png_ver,$/;"	f
png_read_init_3	libpng/pngread.c	/^png_read_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,$/;"	f
png_read_png	libpng/pngread.c	/^png_read_png(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_push_finish_row	libpng/pngpread.c	/^png_read_push_finish_row(png_structp png_ptr)$/;"	f
png_read_row	libpng/pngread.c	/^png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)$/;"	f
png_read_rows	libpng/pngread.c	/^png_read_rows(png_structp png_ptr, png_bytepp row,$/;"	f
png_read_start_row	libpng/pngrutil.c	/^png_read_start_row(png_structp png_ptr)$/;"	f
png_read_status_ptr	libpng/png.h	/^typedef void (PNGAPI *png_read_status_ptr) PNGARG((png_structp, png_uint_32,$/;"	t
png_read_status_ptr_NULL	libpng/png.h	602;"	d
png_read_status_ptr_NULL	libpng/png.h	618;"	d
png_read_transform_info	libpng/pngrtran.c	/^png_read_transform_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_update_info	libpng/pngread.c	/^png_read_update_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_reset_crc	libpng/png.c	/^png_reset_crc(png_structp png_ptr)$/;"	f
png_reset_zstream	libpng/png.c	/^png_reset_zstream(png_structp png_ptr)$/;"	f
png_row_info	libpng/png.h	/^} png_row_info;$/;"	t	typeref:struct:png_row_info_struct
png_row_info_struct	libpng/png.h	/^typedef struct png_row_info_struct$/;"	s
png_row_infop	libpng/png.h	/^typedef png_row_info FAR * png_row_infop;$/;"	t
png_row_infopp	libpng/png.h	/^typedef png_row_info FAR * FAR * png_row_infopp;$/;"	t
png_rw_ptr	libpng/png.h	/^typedef void (PNGAPI *png_rw_ptr) PNGARG((png_structp, png_bytep, png_size_t));$/;"	t
png_rw_ptr_NULL	libpng/png.h	603;"	d
png_rw_ptr_NULL	libpng/png.h	619;"	d
png_sPLT_entry	libpng/png.h	/^} png_sPLT_entry;$/;"	t	typeref:struct:png_sPLT_entry_struct
png_sPLT_entry_struct	libpng/png.h	/^typedef struct png_sPLT_entry_struct$/;"	s
png_sPLT_entryp	libpng/png.h	/^typedef png_sPLT_entry FAR * png_sPLT_entryp;$/;"	t
png_sPLT_entrypp	libpng/png.h	/^typedef png_sPLT_entry FAR * FAR * png_sPLT_entrypp;$/;"	t
png_sPLT_struct	libpng/png.h	/^typedef struct png_sPLT_struct$/;"	s
png_sPLT_t	libpng/png.h	/^} png_sPLT_t;$/;"	t	typeref:struct:png_sPLT_struct
png_sPLT_tp	libpng/png.h	/^typedef png_sPLT_t FAR * png_sPLT_tp;$/;"	t
png_sPLT_tpp	libpng/png.h	/^typedef png_sPLT_t FAR * FAR * png_sPLT_tpp;$/;"	t
png_save_int_32	libpng/pngwutil.c	/^png_save_int_32(png_bytep buf, png_int_32 i)$/;"	f
png_save_uint_16	libpng/pngwutil.c	/^png_save_uint_16(png_bytep buf, unsigned int i)$/;"	f
png_save_uint_32	libpng/pngwutil.c	/^png_save_uint_32(png_bytep buf, png_uint_32 i)$/;"	f
png_set_IHDR	libpng/pngset.c	/^png_set_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_PLTE	libpng/pngset.c	/^png_set_PLTE(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_add_alpha	libpng/pngtrans.c	/^png_set_add_alpha(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_asm_flags	libpng/pngset.c	/^png_set_asm_flags (png_structp png_ptr, png_uint_32 asm_flags)$/;"	f
png_set_bKGD	libpng/pngset.c	/^png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background)$/;"	f
png_set_background	libpng/pngrtran.c	/^png_set_background(png_structp png_ptr,$/;"	f
png_set_benign_errors	libpng/pngset.c	/^png_set_benign_errors(png_structp png_ptr, int allowed)$/;"	f
png_set_bgr	libpng/pngtrans.c	/^png_set_bgr(png_structp png_ptr)$/;"	f
png_set_cHRM	libpng/pngset.c	/^png_set_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_cHRM_fixed	libpng/pngset.c	/^png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_compression_buffer_size	libpng/pngset.c	/^png_set_compression_buffer_size(png_structp png_ptr,$/;"	f
png_set_compression_level	libpng/pngwrite.c	/^png_set_compression_level(png_structp png_ptr, int level)$/;"	f
png_set_compression_mem_level	libpng/pngwrite.c	/^png_set_compression_mem_level(png_structp png_ptr, int mem_level)$/;"	f
png_set_compression_method	libpng/pngwrite.c	/^png_set_compression_method(png_structp png_ptr, int method)$/;"	f
png_set_compression_strategy	libpng/pngwrite.c	/^png_set_compression_strategy(png_structp png_ptr, int strategy)$/;"	f
png_set_compression_window_bits	libpng/pngwrite.c	/^png_set_compression_window_bits(png_structp png_ptr, int window_bits)$/;"	f
png_set_crc_action	libpng/pngrtran.c	/^png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action)$/;"	f
png_set_dither	libpng/pngrtran.c	/^png_set_dither(png_structp png_ptr, png_colorp palette,$/;"	f
png_set_error_fn	libpng/pngerror.c	/^png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,$/;"	f
png_set_expand	libpng/pngrtran.c	/^png_set_expand(png_structp png_ptr)$/;"	f
png_set_expand_gray_1_2_4_to_8	libpng/pngrtran.c	/^png_set_expand_gray_1_2_4_to_8(png_structp png_ptr)$/;"	f
png_set_filler	libpng/pngtrans.c	/^png_set_filler(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_filter	libpng/pngwrite.c	/^png_set_filter(png_structp png_ptr, int method, int filters)$/;"	f
png_set_filter_heuristics	libpng/pngwrite.c	/^png_set_filter_heuristics(png_structp png_ptr, int heuristic_method,$/;"	f
png_set_flush	libpng/pngwrite.c	/^png_set_flush(png_structp png_ptr, int nrows)$/;"	f
png_set_gAMA	libpng/pngset.c	/^png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)$/;"	f
png_set_gAMA_fixed	libpng/pngset.c	/^png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point$/;"	f
png_set_gamma	libpng/pngrtran.c	/^png_set_gamma(png_structp png_ptr, double scrn_gamma, double file_gamma)$/;"	f
png_set_gray_1_2_4_to_8	libpng/pngrtran.c	/^png_set_gray_1_2_4_to_8(png_structp png_ptr)$/;"	f
png_set_gray_to_rgb	libpng/pngrtran.c	/^png_set_gray_to_rgb(png_structp png_ptr)$/;"	f
png_set_hIST	libpng/pngset.c	/^png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist)$/;"	f
png_set_iCCP	libpng/pngset.c	/^png_set_iCCP(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_interlace_handling	libpng/pngtrans.c	/^png_set_interlace_handling(png_structp png_ptr)$/;"	f
png_set_invalid	libpng/pngset.c	/^png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)$/;"	f
png_set_invert_alpha	libpng/pngtrans.c	/^png_set_invert_alpha(png_structp png_ptr)$/;"	f
png_set_invert_mono	libpng/pngtrans.c	/^png_set_invert_mono(png_structp png_ptr)$/;"	f
png_set_keep_unknown_chunks	libpng/pngset.c	/^png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_bytep$/;"	f
png_set_mem_fn	libpng/pngmem.c	/^png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr, png_malloc_ptr$/;"	f
png_set_mmx_thresholds	libpng/pngset.c	/^png_set_mmx_thresholds (png_structp png_ptr,$/;"	f
png_set_oFFs	libpng/pngset.c	/^png_set_oFFs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pCAL	libpng/pngset.c	/^png_set_pCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pHYs	libpng/pngset.c	/^png_set_pHYs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_packing	libpng/pngtrans.c	/^png_set_packing(png_structp png_ptr)$/;"	f
png_set_packswap	libpng/pngtrans.c	/^png_set_packswap(png_structp png_ptr)$/;"	f
png_set_palette_to_rgb	libpng/pngrtran.c	/^png_set_palette_to_rgb(png_structp png_ptr)$/;"	f
png_set_progressive_read_fn	libpng/pngpread.c	/^png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr,$/;"	f
png_set_read_fn	libpng/pngrio.c	/^png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,$/;"	f
png_set_read_status_fn	libpng/pngread.c	/^png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)$/;"	f
png_set_read_user_chunk_fn	libpng/pngset.c	/^png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,$/;"	f
png_set_read_user_transform_fn	libpng/pngrtran.c	/^png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr$/;"	f
png_set_rgb_to_gray	libpng/pngrtran.c	/^png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red,$/;"	f
png_set_rgb_to_gray_fixed	libpng/pngrtran.c	/^png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action,$/;"	f
png_set_rows	libpng/pngset.c	/^png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)$/;"	f
png_set_sBIT	libpng/pngset.c	/^png_set_sBIT(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sCAL	libpng/pngset.c	/^png_set_sCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sCAL_s	libpng/pngset.c	/^png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sPLT	libpng/pngset.c	/^png_set_sPLT(png_structp png_ptr,$/;"	f
png_set_sRGB	libpng/pngset.c	/^png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent)$/;"	f
png_set_sRGB_gAMA_and_cHRM	libpng/pngset.c	/^png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_shift	libpng/pngtrans.c	/^png_set_shift(png_structp png_ptr, png_color_8p true_bits)$/;"	f
png_set_sig_bytes	libpng/png.c	/^png_set_sig_bytes(png_structp png_ptr, int num_bytes)$/;"	f
png_set_strip_16	libpng/pngrtran.c	/^png_set_strip_16(png_structp png_ptr)$/;"	f
png_set_strip_alpha	libpng/pngrtran.c	/^png_set_strip_alpha(png_structp png_ptr)$/;"	f
png_set_strip_error_numbers	libpng/pngerror.c	/^png_set_strip_error_numbers(png_structp png_ptr, png_uint_32 strip_mode)$/;"	f
png_set_swap	libpng/pngtrans.c	/^png_set_swap(png_structp png_ptr)$/;"	f
png_set_swap_alpha	libpng/pngtrans.c	/^png_set_swap_alpha(png_structp png_ptr)$/;"	f
png_set_tIME	libpng/pngset.c	/^png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)$/;"	f
png_set_tRNS	libpng/pngset.c	/^png_set_tRNS(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_tRNS_to_alpha	libpng/pngrtran.c	/^png_set_tRNS_to_alpha(png_structp png_ptr)$/;"	f
png_set_text	libpng/pngset.c	/^png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,$/;"	f
png_set_text_2	libpng/pngset.c	/^png_set_text_2(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,$/;"	f
png_set_unknown_chunk_location	libpng/pngset.c	/^png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_unknown_chunks	libpng/pngset.c	/^png_set_unknown_chunks(png_structp png_ptr,$/;"	f
png_set_user_limits	libpng/pngset.c	/^png_set_user_limits (png_structp png_ptr, png_uint_32 user_width_max,$/;"	f
png_set_user_transform_info	libpng/pngtrans.c	/^png_set_user_transform_info(png_structp png_ptr, png_voidp$/;"	f
png_set_write_fn	libpng/pngwio.c	/^png_set_write_fn(png_structp png_ptr, png_voidp io_ptr,$/;"	f
png_set_write_status_fn	libpng/pngwrite.c	/^png_set_write_status_fn(png_structp png_ptr, png_write_status_ptr write_row_fn)$/;"	f
png_set_write_user_transform_fn	libpng/pngwrite.c	/^png_set_write_user_transform_fn(png_structp png_ptr, png_user_transform_ptr$/;"	f
png_sig	libpng/png.c	/^PNG_CONST png_byte FARDATA png_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
png_sig_cmp	libpng/png.c	/^png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check)$/;"	f
png_size_t	libpng/pngconf.h	/^   typedef PNG_SIZE_T png_size_t;$/;"	t
png_size_t	libpng/pngconf.h	/^   typedef size_t png_size_t;$/;"	t
png_sizeof	libpng/pngconf.h	1257;"	d
png_sizeof	libpng/pngconf.h	1260;"	d
png_snprintf	libpng/pngconf.h	1629;"	d
png_snprintf	libpng/pngconf.h	1639;"	d
png_snprintf	libpng/pngconf.h	1643;"	d
png_snprintf	libpng/pngconf.h	1654;"	d
png_snprintf2	libpng/pngconf.h	1640;"	d
png_snprintf2	libpng/pngconf.h	1644;"	d
png_snprintf2	libpng/pngconf.h	1655;"	d
png_snprintf6	libpng/pngconf.h	1641;"	d
png_snprintf6	libpng/pngconf.h	1645;"	d
png_snprintf6	libpng/pngconf.h	1656;"	d
png_start_read_image	libpng/pngread.c	/^png_start_read_image(png_structp png_ptr)$/;"	f
png_strlen	libpng/pngconf.h	1630;"	d
png_strlen	libpng/pngconf.h	1659;"	d
png_strtod	libpng/pngrutil.c	/^__inline double png_strtod(png_structp png_ptr, PNG_CONST char *nptr,$/;"	f
png_strtod	libpng/pngrutil.c	49;"	d	file:
png_struct	libpng/png.h	/^typedef struct png_struct_def png_struct;$/;"	t	typeref:struct:png_struct_def
png_struct_def	libpng/png.h	/^struct png_struct_def$/;"	s
png_structp	libpng/png.h	/^typedef png_struct FAR * png_structp;$/;"	t
png_structp_NULL	libpng/png.h	604;"	d
png_structp_NULL	libpng/png.h	620;"	d
png_structpp	libpng/png.h	/^typedef png_struct FAR * FAR * png_structpp;$/;"	t
png_text	libpng/png.h	/^} png_text;$/;"	t	typeref:struct:png_text_struct
png_text_compress	libpng/pngwutil.c	/^png_text_compress(png_structp png_ptr,$/;"	f	file:
png_text_struct	libpng/png.h	/^typedef struct png_text_struct$/;"	s
png_textp	libpng/png.h	/^typedef png_text FAR * png_textp;$/;"	t
png_textpp	libpng/png.h	/^typedef png_text FAR * FAR * png_textpp;$/;"	t
png_time	libpng/png.h	/^} png_time;$/;"	t	typeref:struct:png_time_struct
png_time_struct	libpng/png.h	/^typedef struct png_time_struct$/;"	s
png_timep	libpng/png.h	/^typedef png_time FAR * png_timep;$/;"	t
png_timepp	libpng/png.h	/^typedef png_time FAR * FAR * png_timepp;$/;"	t
png_uint_16	libpng/pngconf.h	/^typedef unsigned short png_uint_16;$/;"	t
png_uint_16p	libpng/pngconf.h	/^typedef png_uint_16     FAR * png_uint_16p;$/;"	t
png_uint_16p_NULL	libpng/png.h	605;"	d
png_uint_16p_NULL	libpng/png.h	621;"	d
png_uint_16pp	libpng/pngconf.h	/^typedef png_uint_16     FAR * FAR * png_uint_16pp;$/;"	t
png_uint_32	libpng/pngconf.h	/^typedef unsigned long png_uint_32;$/;"	t
png_uint_32p	libpng/pngconf.h	/^typedef png_uint_32     FAR * png_uint_32p;$/;"	t
png_uint_32pp	libpng/pngconf.h	/^typedef png_uint_32     FAR * FAR * png_uint_32pp;$/;"	t
png_unknown_chunk	libpng/png.h	/^png_unknown_chunk;$/;"	t	typeref:struct:png_unknown_chunk_t
png_unknown_chunk_ptr	libpng/png.h	/^typedef void (PNGAPI *png_unknown_chunk_ptr) PNGARG((png_structp));$/;"	t
png_unknown_chunk_t	libpng/png.h	/^typedef struct png_unknown_chunk_t$/;"	s
png_unknown_chunkp	libpng/png.h	/^typedef png_unknown_chunk FAR * png_unknown_chunkp;$/;"	t
png_unknown_chunkpp	libpng/png.h	/^typedef png_unknown_chunk FAR * FAR * png_unknown_chunkpp;$/;"	t
png_user_chunk_ptr	libpng/png.h	/^typedef int (PNGAPI *png_user_chunk_ptr) PNGARG((png_structp, png_unknown_chunkp));$/;"	t
png_user_transform_ptr	libpng/png.h	/^typedef void (PNGAPI *png_user_transform_ptr) PNGARG((png_structp,$/;"	t
png_voidp	libpng/pngconf.h	/^typedef void            FAR * png_voidp;$/;"	t
png_voidp_NULL	libpng/png.h	606;"	d
png_voidp_NULL	libpng/png.h	622;"	d
png_warning	libpng/pngerror.c	/^png_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_write_IDAT	libpng/pngwutil.c	/^png_write_IDAT(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_write_IEND	libpng/pngwutil.c	/^png_write_IEND(png_structp png_ptr)$/;"	f
png_write_IHDR	libpng/pngwutil.c	/^png_write_IHDR(png_structp png_ptr, png_uint_32 width, png_uint_32 height,$/;"	f
png_write_PLTE	libpng/pngwutil.c	/^png_write_PLTE(png_structp png_ptr, png_colorp palette, png_uint_32 num_pal)$/;"	f
png_write_bKGD	libpng/pngwutil.c	/^png_write_bKGD(png_structp png_ptr, png_color_16p back, int color_type)$/;"	f
png_write_cHRM	libpng/pngwutil.c	/^png_write_cHRM(png_structp png_ptr, double white_x, double white_y,$/;"	f
png_write_cHRM_fixed	libpng/pngwutil.c	/^png_write_cHRM_fixed(png_structp png_ptr, png_fixed_point white_x,$/;"	f
png_write_chunk	libpng/pngwutil.c	/^png_write_chunk(png_structp png_ptr, png_bytep chunk_name,$/;"	f
png_write_chunk_data	libpng/pngwutil.c	/^png_write_chunk_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_write_chunk_end	libpng/pngwutil.c	/^png_write_chunk_end(png_structp png_ptr)$/;"	f
png_write_chunk_start	libpng/pngwutil.c	/^png_write_chunk_start(png_structp png_ptr, png_bytep chunk_name,$/;"	f
png_write_compressed_data_out	libpng/pngwutil.c	/^png_write_compressed_data_out(png_structp png_ptr, compression_state *comp)$/;"	f	file:
png_write_data	libpng/pngwio.c	/^png_write_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_write_destroy	libpng/pngwrite.c	/^png_write_destroy(png_structp png_ptr)$/;"	f
png_write_end	libpng/pngwrite.c	/^png_write_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_filtered_row	libpng/pngwutil.c	/^png_write_filtered_row(png_structp png_ptr, png_bytep filtered_row)$/;"	f
png_write_find_filter	libpng/pngwutil.c	/^png_write_find_filter(png_structp png_ptr, png_row_infop row_info)$/;"	f
png_write_finish_row	libpng/pngwutil.c	/^png_write_finish_row(png_structp png_ptr)$/;"	f
png_write_flush	libpng/pngwrite.c	/^png_write_flush(png_structp png_ptr)$/;"	f
png_write_gAMA	libpng/pngwutil.c	/^png_write_gAMA(png_structp png_ptr, double file_gamma)$/;"	f
png_write_gAMA_fixed	libpng/pngwutil.c	/^png_write_gAMA_fixed(png_structp png_ptr, png_fixed_point file_gamma)$/;"	f
png_write_hIST	libpng/pngwutil.c	/^png_write_hIST(png_structp png_ptr, png_uint_16p hist, int num_hist)$/;"	f
png_write_iCCP	libpng/pngwutil.c	/^png_write_iCCP(png_structp png_ptr, png_charp name, int compression_type,$/;"	f
png_write_iTXt	libpng/pngwutil.c	/^png_write_iTXt(png_structp png_ptr, int compression, png_charp key,$/;"	f
png_write_image	libpng/pngwrite.c	/^png_write_image(png_structp png_ptr, png_bytepp image)$/;"	f
png_write_info	libpng/pngwrite.c	/^png_write_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_info_before_PLTE	libpng/pngwrite.c	/^png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_init	libpng/png.h	3147;"	d
png_write_init	libpng/png.h	3148;"	d
png_write_init	libpng/pngwrite.c	/^png_write_init(png_structp png_ptr)$/;"	f
png_write_init	libpng/pngwrite.c	612;"	d	file:
png_write_init_2	libpng/pngwrite.c	/^png_write_init_2(png_structp png_ptr, png_const_charp user_png_ver,$/;"	f
png_write_init_3	libpng/pngwrite.c	/^png_write_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,$/;"	f
png_write_oFFs	libpng/pngwutil.c	/^png_write_oFFs(png_structp png_ptr, png_int_32 x_offset, png_int_32 y_offset,$/;"	f
png_write_pCAL	libpng/pngwutil.c	/^png_write_pCAL(png_structp png_ptr, png_charp purpose, png_int_32 X0,$/;"	f
png_write_pHYs	libpng/pngwutil.c	/^png_write_pHYs(png_structp png_ptr, png_uint_32 x_pixels_per_unit,$/;"	f
png_write_png	libpng/pngwrite.c	/^png_write_png(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_write_row	libpng/pngwrite.c	/^png_write_row(png_structp png_ptr, png_bytep row)$/;"	f
png_write_rows	libpng/pngwrite.c	/^png_write_rows(png_structp png_ptr, png_bytepp row,$/;"	f
png_write_sBIT	libpng/pngwutil.c	/^png_write_sBIT(png_structp png_ptr, png_color_8p sbit, int color_type)$/;"	f
png_write_sCAL	libpng/pngwutil.c	/^png_write_sCAL(png_structp png_ptr, int unit, double width, double height)$/;"	f
png_write_sCAL_s	libpng/pngwutil.c	/^png_write_sCAL_s(png_structp png_ptr, int unit, png_charp width,$/;"	f
png_write_sPLT	libpng/pngwutil.c	/^png_write_sPLT(png_structp png_ptr, png_sPLT_tp spalette)$/;"	f
png_write_sRGB	libpng/pngwutil.c	/^png_write_sRGB(png_structp png_ptr, int srgb_intent)$/;"	f
png_write_sig	libpng/pngwutil.c	/^png_write_sig(png_structp png_ptr)$/;"	f
png_write_start_row	libpng/pngwutil.c	/^png_write_start_row(png_structp png_ptr)$/;"	f
png_write_status_ptr	libpng/png.h	/^typedef void (PNGAPI *png_write_status_ptr) PNGARG((png_structp, png_uint_32,$/;"	t
png_write_status_ptr_NULL	libpng/png.h	607;"	d
png_write_status_ptr_NULL	libpng/png.h	623;"	d
png_write_tEXt	libpng/pngwutil.c	/^png_write_tEXt(png_structp png_ptr, png_charp key, png_charp text,$/;"	f
png_write_tIME	libpng/pngwutil.c	/^png_write_tIME(png_structp png_ptr, png_timep mod_time)$/;"	f
png_write_tRNS	libpng/pngwutil.c	/^png_write_tRNS(png_structp png_ptr, png_bytep trans, png_color_16p tran,$/;"	f
png_write_zTXt	libpng/pngwutil.c	/^png_write_zTXt(png_structp png_ptr, png_charp key, png_charp text,$/;"	f
png_zalloc	libpng/png.c	/^png_zalloc(voidpf png_ptr, uInt items, uInt size)$/;"	f
png_zcharp	libpng/pngconf.h	/^typedef charf *         png_zcharp;$/;"	t
png_zcharpp	libpng/pngconf.h	/^typedef charf * FAR *   png_zcharpp;$/;"	t
png_zfree	libpng/png.c	/^png_zfree(voidpf png_ptr, voidpf ptr)$/;"	f
png_zstreamp	libpng/pngconf.h	/^typedef z_stream FAR *  png_zstreamp;$/;"	t
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter()$/;"	f	class:pngwriter
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter(const pngwriter &rhs)$/;"	f	class:pngwriter
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter(int x, int y, double backgroundcolour, char * filename)$/;"	f	class:pngwriter
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter(int x, int y, double backgroundcolour, const char * filename)$/;"	f	class:pngwriter
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter(int x, int y, int backgroundcolour, char * filename)$/;"	f	class:pngwriter
pngwriter	pngwriter.cpp	/^pngwriter::pngwriter(int x, int y, int backgroundcolour, const char * filename)$/;"	f	class:pngwriter
pngwriter	pngwriter.h	/^class pngwriter $/;"	c
pngwriter_rename	pngwriter.cpp	/^void pngwriter::pngwriter_rename(char * newname)$/;"	f	class:pngwriter
pngwriter_rename	pngwriter.cpp	/^void pngwriter::pngwriter_rename(const char * newname)$/;"	f	class:pngwriter
pngwriter_rename	pngwriter.cpp	/^void pngwriter::pngwriter_rename(long unsigned int index)$/;"	f	class:pngwriter
polygon	pngwriter.cpp	/^void pngwriter::polygon( int * points, int number_of_points, double red, double green, double blue)$/;"	f	class:pngwriter
polygon	pngwriter.cpp	/^void pngwriter::polygon( int * points, int number_of_points, int red, int green, int blue)$/;"	f	class:pngwriter
polygon_blend	pngwriter.cpp	/^void pngwriter::polygon_blend( int * points, int number_of_points, double opacity,  double red, double green, double blue)$/;"	f	class:pngwriter
polygon_blend	pngwriter.cpp	/^void pngwriter::polygon_blend( int * points, int number_of_points, double opacity, int red, int green, int blue)$/;"	f	class:pngwriter
pos	zlib/gzguts.h	/^    z_off64_t pos;          \/* current position in uncompressed data *\/$/;"	m	struct:__anon7
pqdownheap	zlib/trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	zlib/trees.c	437;"	d	file:
prev	zlib/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state
prev_length	zlib/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state
prev_match	zlib/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state
program_CXX_OBJS	makefile	/^program_CXX_OBJS := ${program_CXX_SRCS:.cpp=.o}$/;"	m
program_CXX_SRCS	makefile	/^program_CXX_SRCS := $(wildcard *.cpp)$/;"	m
program_C_OBJS	makefile	/^program_C_OBJS := ${program_C_SRCS:.c=.o}$/;"	m
program_C_SRCS	makefile	/^program_C_SRCS := $(wildcard *.c)$/;"	m
program_INCLUDE_DIRS	makefile	/^program_INCLUDE_DIRS := zlib libpng$/;"	m
program_LIBRARIES	makefile	/^program_LIBRARIES :=$/;"	m
program_LIBRARY_DIRS	makefile	/^program_LIBRARY_DIRS :=$/;"	m
program_NAME	makefile	/^program_NAME := myprogram$/;"	m
program_OBJS	makefile	/^program_OBJS := $(program_C_OBJS) $(program_CXX_OBJS)$/;"	m
ptr_table	zlib/zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	zlib/zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
ptrdiff_t	zlib/zutil.h	/^       typedef int ptrdiff_t;$/;"	t
putShortMSB	zlib/deflate.c	/^local void putShortMSB (s, b)$/;"	f
put_byte	zlib/deflate.h	275;"	d
put_short	zlib/trees.c	181;"	d	file:
raw	zlib/gzguts.h	/^    z_off64_t raw;          \/* where the raw data started, for seeking *\/$/;"	m	struct:__anon7
read	pngwriter.cpp	/^int pngwriter::read(int x, int y, int colour)$/;"	f	class:pngwriter
read	pngwriter.cpp	/^int pngwriter::read(int xxx, int yyy)$/;"	f	class:pngwriter
readCMYK	pngwriter.cpp	/^int pngwriter::readCMYK(int x, int y, int colour)$/;"	f	class:pngwriter
readHSV	pngwriter.cpp	/^int pngwriter::readHSV(int x, int y, int colour)$/;"	f	class:pngwriter
read_buf	zlib/deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
read_png_image	pngwriter.cpp	/^int pngwriter::read_png_image(FILE *fp, png_structp png_ptr, png_infop info_ptr,$/;"	f	class:pngwriter
read_png_info	pngwriter.cpp	/^int pngwriter::read_png_info(FILE *fp, png_structp *png_ptr, png_infop *info_ptr)$/;"	f	class:pngwriter
readfromfile	pngwriter.cpp	/^void pngwriter::readfromfile(char * name)$/;"	f	class:pngwriter
readfromfile	pngwriter.cpp	/^void pngwriter::readfromfile(const char * name)$/;"	f	class:pngwriter
red	libpng/png.h	/^   png_byte red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_8_struct
red	libpng/png.h	/^   png_byte red;$/;"	m	struct:png_color_struct
red	libpng/png.h	/^   png_uint_16 red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_16_struct
red	libpng/png.h	/^   png_uint_16 red;$/;"	m	struct:png_sPLT_entry_struct
reserved	zlib/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s
resize	pngwriter.cpp	/^void pngwriter::resize(int width, int height)$/;"	f	class:pngwriter
right	libpng/pngrtran.c	/^   png_byte right;$/;"	m	struct:png_dsort_struct	file:
rowbytes	libpng/png.h	/^   png_uint_32 rowbytes; \/* number of bytes in row *\/$/;"	m	struct:png_row_info_struct
rowbytes_	pngwriter.h	/^   int rowbytes_;$/;"	m	class:pngwriter
sane	zlib/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state
scale_k	pngwriter.cpp	/^void pngwriter::scale_k(double k)$/;"	f	class:pngwriter
scale_kxky	pngwriter.cpp	/^void pngwriter::scale_kxky(double kx, double ky)$/;"	f	class:pngwriter
scale_wh	pngwriter.cpp	/^void pngwriter::scale_wh(int finalwidth, int finalheight)$/;"	f	class:pngwriter
scan_tree	zlib/trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
screengamma_	pngwriter.h	/^   double screengamma_;$/;"	m	class:pngwriter
second	libpng/png.h	/^   png_byte second;  \/* second of minute, 0 - 60 (for leap seconds) *\/$/;"	m	struct:png_time_struct
seek	zlib/gzguts.h	/^    int seek;               \/* true if seek request pending *\/$/;"	m	struct:__anon7
send_all_trees	zlib/trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	zlib/trees.c	/^local void send_bits(s, value, length)$/;"	f
send_bits	zlib/trees.c	218;"	d	file:
send_code	zlib/trees.c	168;"	d	file:
send_code	zlib/trees.c	172;"	d	file:
send_tree	zlib/trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
setcompressionlevel	pngwriter.cpp	/^void pngwriter::setcompressionlevel(int level)$/;"	f	class:pngwriter
setgamma	pngwriter.cpp	/^void pngwriter::setgamma(double gamma)$/;"	f	class:pngwriter
settext	pngwriter.cpp	/^void pngwriter::settext(char * title, char * author, char * description, char * software)$/;"	f	class:pngwriter
settext	pngwriter.cpp	/^void pngwriter::settext(const char * title, const char * author, const char * description, const char * software)$/;"	f	class:pngwriter
size	libpng/png.h	/^    png_size_t size;$/;"	m	struct:png_unknown_chunk_t
size	zlib/gzguts.h	/^    unsigned size;          \/* buffer size, zero if not allocated yet *\/$/;"	m	struct:__anon7
skip	zlib/gzguts.h	/^    z_off64_t skip;         \/* amount to skip (already rewound if backwards) *\/$/;"	m	struct:__anon7
smaller	zlib/trees.c	448;"	d	file:
square	pngwriter.cpp	/^void pngwriter::square(int xfrom, int yfrom, int xto, int yto, double red, double green, double blue)$/;"	f	class:pngwriter
square	pngwriter.cpp	/^void pngwriter::square(int xfrom, int yfrom, int xto, int yto, int red, int green, int blue)$/;"	f	class:pngwriter
square_blend	pngwriter.cpp	/^void pngwriter::square_blend(int xfrom, int yfrom, int xto, int yto, double opacity, double red, double green,double  blue)$/;"	f	class:pngwriter
square_blend	pngwriter.cpp	/^void pngwriter::square_blend(int xfrom, int yfrom, int xto, int yto, double opacity, int red, int green,int  blue)$/;"	f	class:pngwriter
start	zlib/gzguts.h	/^    z_off64_t start;        \/* where the gzip data started, for rewinding *\/$/;"	m	struct:__anon7
stat_desc	zlib/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s
state	zlib/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR
static_bl_desc	zlib/trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	zlib/trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	zlib/trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_dtree	zlib/trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_l_desc	zlib/trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_len	zlib/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state
static_ltree	zlib/trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_ltree	zlib/trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
static_tree	zlib/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
static_tree_desc	zlib/deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
static_tree_desc_s	zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
static_tree_desc_s	zlib/trees.c	/^struct static_tree_desc_s {$/;"	s	file:
status	zlib/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state
strategy	zlib/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state
strategy	zlib/gzguts.h	/^    int strategy;           \/* compression strategy *\/$/;"	m	struct:__anon7
strm	zlib/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state
strm	zlib/gzguts.h	/^    z_stream strm;          \/* stream structure in-place (not a pointer) *\/$/;"	m	struct:__anon7
strstart	zlib/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state
syncsearch	zlib/inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
table	zlib/zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
text	libpng/png.h	/^   png_charp text;         \/* comment, may be an empty string (ie "")$/;"	m	struct:png_text_struct
text	zlib/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s
text_length	libpng/png.h	/^   png_size_t text_length; \/* length of the text string *\/$/;"	m	struct:png_text_struct
textauthor_	pngwriter.h	/^   char * textauthor_;   $/;"	m	class:pngwriter
textdescription_	pngwriter.h	/^   char * textdescription_;   $/;"	m	class:pngwriter
textsoftware_	pngwriter.h	/^   char * textsoftware_;   $/;"	m	class:pngwriter
texttitle_	pngwriter.h	/^   char * texttitle_;   $/;"	m	class:pngwriter
time	zlib/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s
total	zlib/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state
total_in	zlib/zlib.h	/^    uLong    total_in;  \/* total nb of input bytes read so far *\/$/;"	m	struct:z_stream_s
total_out	zlib/zlib.h	/^    uLong    total_out; \/* total nb of bytes output so far *\/$/;"	m	struct:z_stream_s
tr_static_init	zlib/trees.c	/^local void tr_static_init()$/;"	f
transformation_	pngwriter.h	/^   bool transformation_; \/\/ Required by Mikkel's patch$/;"	m	class:pngwriter
tree_desc	zlib/deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	zlib/deflate.h	/^typedef struct tree_desc_s {$/;"	s
triangle	pngwriter.cpp	/^void pngwriter::triangle(int x1, int y1, int x2, int y2, int x3, int y3, double red, double green, double blue)$/;"	f	class:pngwriter
triangle	pngwriter.cpp	/^void pngwriter::triangle(int x1, int y1, int x2, int y2, int x3, int y3, int red, int green, int blue)$/;"	f	class:pngwriter
twobppswaptable	libpng/pngtrans.c	/^static PNG_CONST png_byte twobppswaptable[256] = {$/;"	v	file:
u4	zlib/crc32.c	/^           typedef unsigned short u4;$/;"	t	file:
u4	zlib/crc32.c	/^         typedef unsigned long u4;$/;"	t	file:
u4	zlib/crc32.c	/^       typedef unsigned int u4;$/;"	t	file:
uInt	zlib/zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uInt	zlib/zconf.h	120;"	d
uIntf	zlib/zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uIntf	zlib/zconf.h	121;"	d
uLong	zlib/zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLong	zlib/zconf.h	122;"	d
uLongf	zlib/zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uLongf	zlib/zconf.h	123;"	d
uch	zlib/zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	zlib/zutil.h	/^typedef uch FAR uchf;$/;"	t
ulg	zlib/zutil.h	/^typedef unsigned long  ulg;$/;"	t
uncompress	zlib/uncompr.c	/^int ZEXPORT uncompress (dest, destLen, source, sourceLen)$/;"	f
uncompress	zlib/zconf.h	101;"	d
updatewindow	zlib/inflate.c	/^local int updatewindow(strm, out)$/;"	f
ush	zlib/zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	zlib/zutil.h	/^typedef ush FAR ushf;$/;"	t
val	zlib/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon1
verbose	zlib/zutil.c	118;"	d	file:
version	pngwriter.cpp	/^double pngwriter::version(void)$/;"	f	class:pngwriter
version_1_2_53	libpng/png.h	/^typedef png_structp version_1_2_53;$/;"	t
voidp	zlib/zconf.h	/^   typedef Byte       *voidp;$/;"	t
voidp	zlib/zconf.h	/^   typedef void       *voidp;$/;"	t
voidp	zlib/zconf.h	124;"	d
voidpc	zlib/zconf.h	/^   typedef Byte const *voidpc;$/;"	t
voidpc	zlib/zconf.h	/^   typedef void const *voidpc;$/;"	t
voidpc	zlib/zconf.h	125;"	d
voidpf	zlib/zconf.h	/^   typedef Byte FAR   *voidpf;$/;"	t
voidpf	zlib/zconf.h	/^   typedef void FAR   *voidpf;$/;"	t
voidpf	zlib/zconf.h	126;"	d
vsnprintf	zlib/gzguts.h	32;"	d
vsnprintf	zlib/zutil.h	217;"	d
w_bits	zlib/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state
w_mask	zlib/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state
w_size	zlib/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state
want	zlib/gzguts.h	/^    unsigned want;          \/* requested buffer size, default is GZBUFSIZE *\/$/;"	m	struct:__anon7
was	zlib/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state
wbits	zlib/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state
whave	zlib/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state
width	libpng/png.h	/^   png_uint_32 width; \/* width of row *\/$/;"	m	struct:png_row_info_struct
width_	pngwriter.h	/^   int width_;$/;"	m	class:pngwriter
window	zlib/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state
window	zlib/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state
window_size	zlib/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state
wnext	zlib/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state
work	zlib/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state
wrap	zlib/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state
wrap	zlib/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state
write_png	pngwriter.cpp	/^void pngwriter::write_png(void)$/;"	f	class:pngwriter
write_table	zlib/crc32.c	/^local void write_table(out, table)$/;"	f
wsize	zlib/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state
xflags	zlib/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s
year	libpng/png.h	/^   png_uint_16 year; \/* full year, as in, 1995 *\/$/;"	m	struct:png_time_struct
zError	zlib/zconf.h	102;"	d
zError	zlib/zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
z_errmsg	zlib/zutil.c	/^const char * const z_errmsg[10] = {$/;"	v
z_error	zlib/zutil.c	/^void z_error (m)$/;"	f
z_off64_t	zlib/gzguts.h	66;"	d
z_off64_t	zlib/gzguts.h	68;"	d
z_off64_t	zlib/zutil.h	171;"	d
z_off64_t	zlib/zutil.h	173;"	d
z_off_t	zlib/zconf.h	374;"	d
z_off_t	zlib/zconf.h	388;"	d
z_stream	zlib/zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	zlib/zlib.h	/^typedef struct z_stream_s {$/;"	s
z_streamp	zlib/zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_verbose	zlib/zutil.c	/^int z_verbose = verbose;$/;"	v
zalloc	zlib/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s
zcalloc	zlib/zconf.h	103;"	d
zcalloc	zlib/zutil.c	/^voidpf zcalloc (opaque, items, size)$/;"	f
zcalloc	zlib/zutil.c	/^voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f
zcfree	zlib/zconf.h	104;"	d
zcfree	zlib/zutil.c	/^void  zcfree (opaque, ptr)$/;"	f
zcfree	zlib/zutil.c	/^void  zcfree (voidpf opaque, voidpf ptr)$/;"	f
zerrno	zlib/zutil.h	29;"	d
zerrno	zlib/zutil.h	37;"	d
zfree	zlib/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s
zlibCompileFlags	zlib/zconf.h	105;"	d
zlibCompileFlags	zlib/zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibVersion	zlib/zconf.h	106;"	d
zlibVersion	zlib/zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zlib_version	zlib/zlib.h	210;"	d
zmemcmp	zlib/zutil.c	/^int zmemcmp(s1, s2, len)$/;"	f
zmemcmp	zlib/zutil.h	245;"	d
zmemcmp	zlib/zutil.h	249;"	d
zmemcpy	zlib/zutil.c	/^void zmemcpy(dest, source, len)$/;"	f
zmemcpy	zlib/zutil.h	244;"	d
zmemcpy	zlib/zutil.h	248;"	d
zmemzero	zlib/zutil.c	/^void zmemzero(dest, len)$/;"	f
zmemzero	zlib/zutil.h	246;"	d
zmemzero	zlib/zutil.h	250;"	d
zseterrno	zlib/zutil.h	28;"	d
zseterrno	zlib/zutil.h	36;"	d
zstrerror	zlib/gzguts.h	49;"	d
zstrerror	zlib/gzguts.h	53;"	d
zstrerror	zlib/gzguts.h	55;"	d
~pngwriter	pngwriter.cpp	/^pngwriter::~pngwriter()$/;"	f	class:pngwriter
